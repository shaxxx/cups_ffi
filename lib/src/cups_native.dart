// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to `cups.h`.
class CupsNative {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  CupsNative(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  CupsNative.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int cupsCancelJob(
    ffi.Pointer<ffi.Int8> name,
    int job_id,
  ) {
    return _cupsCancelJob(
      name,
      job_id,
    );
  }

  late final _cupsCancelJob_ptr =
      _lookup<ffi.NativeFunction<_c_cupsCancelJob>>('cupsCancelJob');
  late final _dart_cupsCancelJob _cupsCancelJob =
      _cupsCancelJob_ptr.asFunction<_dart_cupsCancelJob>();

  ffi.Pointer<ipp_t> cupsDoFileRequest(
    ffi.Pointer<http_t> http,
    ffi.Pointer<ipp_t> request,
    ffi.Pointer<ffi.Int8> resource,
    ffi.Pointer<ffi.Int8> filename,
  ) {
    return _cupsDoFileRequest(
      http,
      request,
      resource,
      filename,
    );
  }

  late final _cupsDoFileRequest_ptr =
      _lookup<ffi.NativeFunction<_c_cupsDoFileRequest>>('cupsDoFileRequest');
  late final _dart_cupsDoFileRequest _cupsDoFileRequest =
      _cupsDoFileRequest_ptr.asFunction<_dart_cupsDoFileRequest>();

  ffi.Pointer<ipp_t> cupsDoRequest(
    ffi.Pointer<http_t> http,
    ffi.Pointer<ipp_t> request,
    ffi.Pointer<ffi.Int8> resource,
  ) {
    return _cupsDoRequest(
      http,
      request,
      resource,
    );
  }

  late final _cupsDoRequest_ptr =
      _lookup<ffi.NativeFunction<_c_cupsDoRequest>>('cupsDoRequest');
  late final _dart_cupsDoRequest _cupsDoRequest =
      _cupsDoRequest_ptr.asFunction<_dart_cupsDoRequest>();

  int cupsEncryption() {
    return _cupsEncryption();
  }

  late final _cupsEncryption_ptr =
      _lookup<ffi.NativeFunction<_c_cupsEncryption>>('cupsEncryption');
  late final _dart_cupsEncryption _cupsEncryption =
      _cupsEncryption_ptr.asFunction<_dart_cupsEncryption>();

  void cupsFreeJobs(
    int num_jobs,
    ffi.Pointer<cups_job_t> jobs,
  ) {
    return _cupsFreeJobs(
      num_jobs,
      jobs,
    );
  }

  late final _cupsFreeJobs_ptr =
      _lookup<ffi.NativeFunction<_c_cupsFreeJobs>>('cupsFreeJobs');
  late final _dart_cupsFreeJobs _cupsFreeJobs =
      _cupsFreeJobs_ptr.asFunction<_dart_cupsFreeJobs>();

  int cupsGetClasses(
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> classes,
  ) {
    return _cupsGetClasses(
      classes,
    );
  }

  late final _cupsGetClasses_ptr =
      _lookup<ffi.NativeFunction<_c_cupsGetClasses>>('cupsGetClasses');
  late final _dart_cupsGetClasses _cupsGetClasses =
      _cupsGetClasses_ptr.asFunction<_dart_cupsGetClasses>();

  ffi.Pointer<ffi.Int8> cupsGetDefault() {
    return _cupsGetDefault();
  }

  late final _cupsGetDefault_ptr =
      _lookup<ffi.NativeFunction<_c_cupsGetDefault>>('cupsGetDefault');
  late final _dart_cupsGetDefault _cupsGetDefault =
      _cupsGetDefault_ptr.asFunction<_dart_cupsGetDefault>();

  int cupsGetJobs(
    ffi.Pointer<ffi.Pointer<cups_job_t>> jobs,
    ffi.Pointer<ffi.Int8> name,
    int myjobs,
    int whichjobs,
  ) {
    return _cupsGetJobs(
      jobs,
      name,
      myjobs,
      whichjobs,
    );
  }

  late final _cupsGetJobs_ptr =
      _lookup<ffi.NativeFunction<_c_cupsGetJobs>>('cupsGetJobs');
  late final _dart_cupsGetJobs _cupsGetJobs =
      _cupsGetJobs_ptr.asFunction<_dart_cupsGetJobs>();

  int cupsGetPrinters(
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> printers,
  ) {
    return _cupsGetPrinters(
      printers,
    );
  }

  late final _cupsGetPrinters_ptr =
      _lookup<ffi.NativeFunction<_c_cupsGetPrinters>>('cupsGetPrinters');
  late final _dart_cupsGetPrinters _cupsGetPrinters =
      _cupsGetPrinters_ptr.asFunction<_dart_cupsGetPrinters>();

  int cupsLastError() {
    return _cupsLastError();
  }

  late final _cupsLastError_ptr =
      _lookup<ffi.NativeFunction<_c_cupsLastError>>('cupsLastError');
  late final _dart_cupsLastError _cupsLastError =
      _cupsLastError_ptr.asFunction<_dart_cupsLastError>();

  int cupsPrintFile(
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> filename,
    ffi.Pointer<ffi.Int8> title,
    int num_options,
    ffi.Pointer<cups_option_t> options,
  ) {
    return _cupsPrintFile(
      name,
      filename,
      title,
      num_options,
      options,
    );
  }

  late final _cupsPrintFile_ptr =
      _lookup<ffi.NativeFunction<_c_cupsPrintFile>>('cupsPrintFile');
  late final _dart_cupsPrintFile _cupsPrintFile =
      _cupsPrintFile_ptr.asFunction<_dart_cupsPrintFile>();

  int cupsPrintFiles(
    ffi.Pointer<ffi.Int8> name,
    int num_files,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> files,
    ffi.Pointer<ffi.Int8> title,
    int num_options,
    ffi.Pointer<cups_option_t> options,
  ) {
    return _cupsPrintFiles(
      name,
      num_files,
      files,
      title,
      num_options,
      options,
    );
  }

  late final _cupsPrintFiles_ptr =
      _lookup<ffi.NativeFunction<_c_cupsPrintFiles>>('cupsPrintFiles');
  late final _dart_cupsPrintFiles _cupsPrintFiles =
      _cupsPrintFiles_ptr.asFunction<_dart_cupsPrintFiles>();

  ffi.Pointer<ffi.Int8> cupsTempFile(
    ffi.Pointer<ffi.Int8> filename,
    int len,
  ) {
    return _cupsTempFile(
      filename,
      len,
    );
  }

  late final _cupsTempFile_ptr =
      _lookup<ffi.NativeFunction<_c_cupsTempFile>>('cupsTempFile');
  late final _dart_cupsTempFile _cupsTempFile =
      _cupsTempFile_ptr.asFunction<_dart_cupsTempFile>();

  int cupsTempFd(
    ffi.Pointer<ffi.Int8> filename,
    int len,
  ) {
    return _cupsTempFd(
      filename,
      len,
    );
  }

  late final _cupsTempFd_ptr =
      _lookup<ffi.NativeFunction<_c_cupsTempFd>>('cupsTempFd');
  late final _dart_cupsTempFd _cupsTempFd =
      _cupsTempFd_ptr.asFunction<_dart_cupsTempFd>();

  int cupsAddDest(
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> instance,
    int num_dests,
    ffi.Pointer<ffi.Pointer<cups_dest_t>> dests,
  ) {
    return _cupsAddDest(
      name,
      instance,
      num_dests,
      dests,
    );
  }

  late final _cupsAddDest_ptr =
      _lookup<ffi.NativeFunction<_c_cupsAddDest>>('cupsAddDest');
  late final _dart_cupsAddDest _cupsAddDest =
      _cupsAddDest_ptr.asFunction<_dart_cupsAddDest>();

  void cupsFreeDests(
    int num_dests,
    ffi.Pointer<cups_dest_t> dests,
  ) {
    return _cupsFreeDests(
      num_dests,
      dests,
    );
  }

  late final _cupsFreeDests_ptr =
      _lookup<ffi.NativeFunction<_c_cupsFreeDests>>('cupsFreeDests');
  late final _dart_cupsFreeDests _cupsFreeDests =
      _cupsFreeDests_ptr.asFunction<_dart_cupsFreeDests>();

  ffi.Pointer<cups_dest_t> cupsGetDest(
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> instance,
    int num_dests,
    ffi.Pointer<cups_dest_t> dests,
  ) {
    return _cupsGetDest(
      name,
      instance,
      num_dests,
      dests,
    );
  }

  late final _cupsGetDest_ptr =
      _lookup<ffi.NativeFunction<_c_cupsGetDest>>('cupsGetDest');
  late final _dart_cupsGetDest _cupsGetDest =
      _cupsGetDest_ptr.asFunction<_dart_cupsGetDest>();

  int cupsGetDests(
    ffi.Pointer<ffi.Pointer<cups_dest_t>> dests,
  ) {
    return _cupsGetDests(
      dests,
    );
  }

  late final _cupsGetDests_ptr =
      _lookup<ffi.NativeFunction<_c_cupsGetDests>>('cupsGetDests');
  late final _dart_cupsGetDests _cupsGetDests =
      _cupsGetDests_ptr.asFunction<_dart_cupsGetDests>();

  void cupsSetDests(
    int num_dests,
    ffi.Pointer<cups_dest_t> dests,
  ) {
    return _cupsSetDests(
      num_dests,
      dests,
    );
  }

  late final _cupsSetDests_ptr =
      _lookup<ffi.NativeFunction<_c_cupsSetDests>>('cupsSetDests');
  late final _dart_cupsSetDests _cupsSetDests =
      _cupsSetDests_ptr.asFunction<_dart_cupsSetDests>();

  int cupsAddOption(
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> value,
    int num_options,
    ffi.Pointer<ffi.Pointer<cups_option_t>> options,
  ) {
    return _cupsAddOption(
      name,
      value,
      num_options,
      options,
    );
  }

  late final _cupsAddOption_ptr =
      _lookup<ffi.NativeFunction<_c_cupsAddOption>>('cupsAddOption');
  late final _dart_cupsAddOption _cupsAddOption =
      _cupsAddOption_ptr.asFunction<_dart_cupsAddOption>();

  void cupsEncodeOptions(
    ffi.Pointer<ipp_t> ipp,
    int num_options,
    ffi.Pointer<cups_option_t> options,
  ) {
    return _cupsEncodeOptions(
      ipp,
      num_options,
      options,
    );
  }

  late final _cupsEncodeOptions_ptr =
      _lookup<ffi.NativeFunction<_c_cupsEncodeOptions>>('cupsEncodeOptions');
  late final _dart_cupsEncodeOptions _cupsEncodeOptions =
      _cupsEncodeOptions_ptr.asFunction<_dart_cupsEncodeOptions>();

  void cupsFreeOptions(
    int num_options,
    ffi.Pointer<cups_option_t> options,
  ) {
    return _cupsFreeOptions(
      num_options,
      options,
    );
  }

  late final _cupsFreeOptions_ptr =
      _lookup<ffi.NativeFunction<_c_cupsFreeOptions>>('cupsFreeOptions');
  late final _dart_cupsFreeOptions _cupsFreeOptions =
      _cupsFreeOptions_ptr.asFunction<_dart_cupsFreeOptions>();

  ffi.Pointer<ffi.Int8> cupsGetOption(
    ffi.Pointer<ffi.Int8> name,
    int num_options,
    ffi.Pointer<cups_option_t> options,
  ) {
    return _cupsGetOption(
      name,
      num_options,
      options,
    );
  }

  late final _cupsGetOption_ptr =
      _lookup<ffi.NativeFunction<_c_cupsGetOption>>('cupsGetOption');
  late final _dart_cupsGetOption _cupsGetOption =
      _cupsGetOption_ptr.asFunction<_dart_cupsGetOption>();

  int cupsParseOptions(
    ffi.Pointer<ffi.Int8> arg,
    int num_options,
    ffi.Pointer<ffi.Pointer<cups_option_t>> options,
  ) {
    return _cupsParseOptions(
      arg,
      num_options,
      options,
    );
  }

  late final _cupsParseOptions_ptr =
      _lookup<ffi.NativeFunction<_c_cupsParseOptions>>('cupsParseOptions');
  late final _dart_cupsParseOptions _cupsParseOptions =
      _cupsParseOptions_ptr.asFunction<_dart_cupsParseOptions>();

  ffi.Pointer<ffi.Int8> cupsGetPassword(
    ffi.Pointer<ffi.Int8> prompt,
  ) {
    return _cupsGetPassword(
      prompt,
    );
  }

  late final _cupsGetPassword_ptr =
      _lookup<ffi.NativeFunction<_c_cupsGetPassword>>('cupsGetPassword');
  late final _dart_cupsGetPassword _cupsGetPassword =
      _cupsGetPassword_ptr.asFunction<_dart_cupsGetPassword>();

  ffi.Pointer<ffi.Int8> cupsServer() {
    return _cupsServer();
  }

  late final _cupsServer_ptr =
      _lookup<ffi.NativeFunction<_c_cupsServer>>('cupsServer');
  late final _dart_cupsServer _cupsServer =
      _cupsServer_ptr.asFunction<_dart_cupsServer>();

  void cupsSetEncryption(
    int e,
  ) {
    return _cupsSetEncryption(
      e,
    );
  }

  late final _cupsSetEncryption_ptr =
      _lookup<ffi.NativeFunction<_c_cupsSetEncryption>>('cupsSetEncryption');
  late final _dart_cupsSetEncryption _cupsSetEncryption =
      _cupsSetEncryption_ptr.asFunction<_dart_cupsSetEncryption>();

  void cupsSetPasswordCB(
    ffi.Pointer<ffi.NativeFunction<cups_password_cb_t>> cb,
  ) {
    return _cupsSetPasswordCB(
      cb,
    );
  }

  late final _cupsSetPasswordCB_ptr =
      _lookup<ffi.NativeFunction<_c_cupsSetPasswordCB>>('cupsSetPasswordCB');
  late final _dart_cupsSetPasswordCB _cupsSetPasswordCB =
      _cupsSetPasswordCB_ptr.asFunction<_dart_cupsSetPasswordCB>();

  void cupsSetServer(
    ffi.Pointer<ffi.Int8> server,
  ) {
    return _cupsSetServer(
      server,
    );
  }

  late final _cupsSetServer_ptr =
      _lookup<ffi.NativeFunction<_c_cupsSetServer>>('cupsSetServer');
  late final _dart_cupsSetServer _cupsSetServer =
      _cupsSetServer_ptr.asFunction<_dart_cupsSetServer>();

  void cupsSetUser(
    ffi.Pointer<ffi.Int8> user,
  ) {
    return _cupsSetUser(
      user,
    );
  }

  late final _cupsSetUser_ptr =
      _lookup<ffi.NativeFunction<_c_cupsSetUser>>('cupsSetUser');
  late final _dart_cupsSetUser _cupsSetUser =
      _cupsSetUser_ptr.asFunction<_dart_cupsSetUser>();

  ffi.Pointer<ffi.Int8> cupsUser() {
    return _cupsUser();
  }

  late final _cupsUser_ptr =
      _lookup<ffi.NativeFunction<_c_cupsUser>>('cupsUser');
  late final _dart_cupsUser _cupsUser =
      _cupsUser_ptr.asFunction<_dart_cupsUser>();

  /// New in CUPS 1.1.20
  int cupsDoAuthentication(
    ffi.Pointer<http_t> http,
    ffi.Pointer<ffi.Int8> method,
    ffi.Pointer<ffi.Int8> resource,
  ) {
    return _cupsDoAuthentication(
      http,
      method,
      resource,
    );
  }

  late final _cupsDoAuthentication_ptr =
      _lookup<ffi.NativeFunction<_c_cupsDoAuthentication>>(
          'cupsDoAuthentication');
  late final _dart_cupsDoAuthentication _cupsDoAuthentication =
      _cupsDoAuthentication_ptr.asFunction<_dart_cupsDoAuthentication>();

  int cupsGetFile(
    ffi.Pointer<http_t> http,
    ffi.Pointer<ffi.Int8> resource,
    ffi.Pointer<ffi.Int8> filename,
  ) {
    return _cupsGetFile(
      http,
      resource,
      filename,
    );
  }

  late final _cupsGetFile_ptr =
      _lookup<ffi.NativeFunction<_c_cupsGetFile>>('cupsGetFile');
  late final _dart_cupsGetFile _cupsGetFile =
      _cupsGetFile_ptr.asFunction<_dart_cupsGetFile>();

  int cupsGetFd(
    ffi.Pointer<http_t> http,
    ffi.Pointer<ffi.Int8> resource,
    int fd,
  ) {
    return _cupsGetFd(
      http,
      resource,
      fd,
    );
  }

  late final _cupsGetFd_ptr =
      _lookup<ffi.NativeFunction<_c_cupsGetFd>>('cupsGetFd');
  late final _dart_cupsGetFd _cupsGetFd =
      _cupsGetFd_ptr.asFunction<_dart_cupsGetFd>();

  int cupsPutFile(
    ffi.Pointer<http_t> http,
    ffi.Pointer<ffi.Int8> resource,
    ffi.Pointer<ffi.Int8> filename,
  ) {
    return _cupsPutFile(
      http,
      resource,
      filename,
    );
  }

  late final _cupsPutFile_ptr =
      _lookup<ffi.NativeFunction<_c_cupsPutFile>>('cupsPutFile');
  late final _dart_cupsPutFile _cupsPutFile =
      _cupsPutFile_ptr.asFunction<_dart_cupsPutFile>();

  int cupsPutFd(
    ffi.Pointer<http_t> http,
    ffi.Pointer<ffi.Int8> resource,
    int fd,
  ) {
    return _cupsPutFd(
      http,
      resource,
      fd,
    );
  }

  late final _cupsPutFd_ptr =
      _lookup<ffi.NativeFunction<_c_cupsPutFd>>('cupsPutFd');
  late final _dart_cupsPutFd _cupsPutFd =
      _cupsPutFd_ptr.asFunction<_dart_cupsPutFd>();

  /// New in CUPS 1.1.21
  ffi.Pointer<ffi.Int8> cupsGetDefault2(
    ffi.Pointer<http_t> http,
  ) {
    return _cupsGetDefault2(
      http,
    );
  }

  late final _cupsGetDefault2_ptr =
      _lookup<ffi.NativeFunction<_c_cupsGetDefault2>>('cupsGetDefault2');
  late final _dart_cupsGetDefault2 _cupsGetDefault2 =
      _cupsGetDefault2_ptr.asFunction<_dart_cupsGetDefault2>();

  int cupsGetDests2(
    ffi.Pointer<http_t> http,
    ffi.Pointer<ffi.Pointer<cups_dest_t>> dests,
  ) {
    return _cupsGetDests2(
      http,
      dests,
    );
  }

  late final _cupsGetDests2_ptr =
      _lookup<ffi.NativeFunction<_c_cupsGetDests2>>('cupsGetDests2');
  late final _dart_cupsGetDests2 _cupsGetDests2 =
      _cupsGetDests2_ptr.asFunction<_dart_cupsGetDests2>();

  int cupsGetJobs2(
    ffi.Pointer<http_t> http,
    ffi.Pointer<ffi.Pointer<cups_job_t>> jobs,
    ffi.Pointer<ffi.Int8> name,
    int myjobs,
    int whichjobs,
  ) {
    return _cupsGetJobs2(
      http,
      jobs,
      name,
      myjobs,
      whichjobs,
    );
  }

  late final _cupsGetJobs2_ptr =
      _lookup<ffi.NativeFunction<_c_cupsGetJobs2>>('cupsGetJobs2');
  late final _dart_cupsGetJobs2 _cupsGetJobs2 =
      _cupsGetJobs2_ptr.asFunction<_dart_cupsGetJobs2>();

  int cupsPrintFile2(
    ffi.Pointer<http_t> http,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> filename,
    ffi.Pointer<ffi.Int8> title,
    int num_options,
    ffi.Pointer<cups_option_t> options,
  ) {
    return _cupsPrintFile2(
      http,
      name,
      filename,
      title,
      num_options,
      options,
    );
  }

  late final _cupsPrintFile2_ptr =
      _lookup<ffi.NativeFunction<_c_cupsPrintFile2>>('cupsPrintFile2');
  late final _dart_cupsPrintFile2 _cupsPrintFile2 =
      _cupsPrintFile2_ptr.asFunction<_dart_cupsPrintFile2>();

  int cupsPrintFiles2(
    ffi.Pointer<http_t> http,
    ffi.Pointer<ffi.Int8> name,
    int num_files,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> files,
    ffi.Pointer<ffi.Int8> title,
    int num_options,
    ffi.Pointer<cups_option_t> options,
  ) {
    return _cupsPrintFiles2(
      http,
      name,
      num_files,
      files,
      title,
      num_options,
      options,
    );
  }

  late final _cupsPrintFiles2_ptr =
      _lookup<ffi.NativeFunction<_c_cupsPrintFiles2>>('cupsPrintFiles2');
  late final _dart_cupsPrintFiles2 _cupsPrintFiles2 =
      _cupsPrintFiles2_ptr.asFunction<_dart_cupsPrintFiles2>();

  int cupsSetDests2(
    ffi.Pointer<http_t> http,
    int num_dests,
    ffi.Pointer<cups_dest_t> dests,
  ) {
    return _cupsSetDests2(
      http,
      num_dests,
      dests,
    );
  }

  late final _cupsSetDests2_ptr =
      _lookup<ffi.NativeFunction<_c_cupsSetDests2>>('cupsSetDests2');
  late final _dart_cupsSetDests2 _cupsSetDests2 =
      _cupsSetDests2_ptr.asFunction<_dart_cupsSetDests2>();

  /// New in CUPS 1.2/macOS 10.5
  void cupsEncodeOptions2(
    ffi.Pointer<ipp_t> ipp,
    int num_options,
    ffi.Pointer<cups_option_t> options,
    int group_tag,
  ) {
    return _cupsEncodeOptions2(
      ipp,
      num_options,
      options,
      group_tag,
    );
  }

  late final _cupsEncodeOptions2_ptr =
      _lookup<ffi.NativeFunction<_c_cupsEncodeOptions2>>('cupsEncodeOptions2');
  late final _dart_cupsEncodeOptions2 _cupsEncodeOptions2 =
      _cupsEncodeOptions2_ptr.asFunction<_dart_cupsEncodeOptions2>();

  ffi.Pointer<ffi.Int8> cupsLastErrorString() {
    return _cupsLastErrorString();
  }

  late final _cupsLastErrorString_ptr =
      _lookup<ffi.NativeFunction<_c_cupsLastErrorString>>(
          'cupsLastErrorString');
  late final _dart_cupsLastErrorString _cupsLastErrorString =
      _cupsLastErrorString_ptr.asFunction<_dart_cupsLastErrorString>();

  ffi.Pointer<ffi.Int8> cupsNotifySubject(
    ffi.Pointer<cups_lang_t> lang,
    ffi.Pointer<ipp_t> event,
  ) {
    return _cupsNotifySubject(
      lang,
      event,
    );
  }

  late final _cupsNotifySubject_ptr =
      _lookup<ffi.NativeFunction<_c_cupsNotifySubject>>('cupsNotifySubject');
  late final _dart_cupsNotifySubject _cupsNotifySubject =
      _cupsNotifySubject_ptr.asFunction<_dart_cupsNotifySubject>();

  ffi.Pointer<ffi.Int8> cupsNotifyText(
    ffi.Pointer<cups_lang_t> lang,
    ffi.Pointer<ipp_t> event,
  ) {
    return _cupsNotifyText(
      lang,
      event,
    );
  }

  late final _cupsNotifyText_ptr =
      _lookup<ffi.NativeFunction<_c_cupsNotifyText>>('cupsNotifyText');
  late final _dart_cupsNotifyText _cupsNotifyText =
      _cupsNotifyText_ptr.asFunction<_dart_cupsNotifyText>();

  int cupsRemoveOption(
    ffi.Pointer<ffi.Int8> name,
    int num_options,
    ffi.Pointer<ffi.Pointer<cups_option_t>> options,
  ) {
    return _cupsRemoveOption(
      name,
      num_options,
      options,
    );
  }

  late final _cupsRemoveOption_ptr =
      _lookup<ffi.NativeFunction<_c_cupsRemoveOption>>('cupsRemoveOption');
  late final _dart_cupsRemoveOption _cupsRemoveOption =
      _cupsRemoveOption_ptr.asFunction<_dart_cupsRemoveOption>();

  ffi.Pointer<cups_file_t> cupsTempFile2(
    ffi.Pointer<ffi.Int8> filename,
    int len,
  ) {
    return _cupsTempFile2(
      filename,
      len,
    );
  }

  late final _cupsTempFile2_ptr =
      _lookup<ffi.NativeFunction<_c_cupsTempFile2>>('cupsTempFile2');
  late final _dart_cupsTempFile2 _cupsTempFile2 =
      _cupsTempFile2_ptr.asFunction<_dart_cupsTempFile2>();

  /// New in CUPS 1.3/macOS 10.5
  ffi.Pointer<ipp_t> cupsDoIORequest(
    ffi.Pointer<http_t> http,
    ffi.Pointer<ipp_t> request,
    ffi.Pointer<ffi.Int8> resource,
    int infile,
    int outfile,
  ) {
    return _cupsDoIORequest(
      http,
      request,
      resource,
      infile,
      outfile,
    );
  }

  late final _cupsDoIORequest_ptr =
      _lookup<ffi.NativeFunction<_c_cupsDoIORequest>>('cupsDoIORequest');
  late final _dart_cupsDoIORequest _cupsDoIORequest =
      _cupsDoIORequest_ptr.asFunction<_dart_cupsDoIORequest>();

  int cupsRemoveDest(
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> instance,
    int num_dests,
    ffi.Pointer<ffi.Pointer<cups_dest_t>> dests,
  ) {
    return _cupsRemoveDest(
      name,
      instance,
      num_dests,
      dests,
    );
  }

  late final _cupsRemoveDest_ptr =
      _lookup<ffi.NativeFunction<_c_cupsRemoveDest>>('cupsRemoveDest');
  late final _dart_cupsRemoveDest _cupsRemoveDest =
      _cupsRemoveDest_ptr.asFunction<_dart_cupsRemoveDest>();

  void cupsSetDefaultDest(
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> instance,
    int num_dests,
    ffi.Pointer<cups_dest_t> dests,
  ) {
    return _cupsSetDefaultDest(
      name,
      instance,
      num_dests,
      dests,
    );
  }

  late final _cupsSetDefaultDest_ptr =
      _lookup<ffi.NativeFunction<_c_cupsSetDefaultDest>>('cupsSetDefaultDest');
  late final _dart_cupsSetDefaultDest _cupsSetDefaultDest =
      _cupsSetDefaultDest_ptr.asFunction<_dart_cupsSetDefaultDest>();

  /// New in CUPS 1.4/macOS 10.6
  int cupsCancelJob2(
    ffi.Pointer<http_t> http,
    ffi.Pointer<ffi.Int8> name,
    int job_id,
    int purge,
  ) {
    return _cupsCancelJob2(
      http,
      name,
      job_id,
      purge,
    );
  }

  late final _cupsCancelJob2_ptr =
      _lookup<ffi.NativeFunction<_c_cupsCancelJob2>>('cupsCancelJob2');
  late final _dart_cupsCancelJob2 _cupsCancelJob2 =
      _cupsCancelJob2_ptr.asFunction<_dart_cupsCancelJob2>();

  int cupsCreateJob(
    ffi.Pointer<http_t> http,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> title,
    int num_options,
    ffi.Pointer<cups_option_t> options,
  ) {
    return _cupsCreateJob(
      http,
      name,
      title,
      num_options,
      options,
    );
  }

  late final _cupsCreateJob_ptr =
      _lookup<ffi.NativeFunction<_c_cupsCreateJob>>('cupsCreateJob');
  late final _dart_cupsCreateJob _cupsCreateJob =
      _cupsCreateJob_ptr.asFunction<_dart_cupsCreateJob>();

  int cupsFinishDocument(
    ffi.Pointer<http_t> http,
    ffi.Pointer<ffi.Int8> name,
  ) {
    return _cupsFinishDocument(
      http,
      name,
    );
  }

  late final _cupsFinishDocument_ptr =
      _lookup<ffi.NativeFunction<_c_cupsFinishDocument>>('cupsFinishDocument');
  late final _dart_cupsFinishDocument _cupsFinishDocument =
      _cupsFinishDocument_ptr.asFunction<_dart_cupsFinishDocument>();

  ffi.Pointer<cups_dest_t> cupsGetNamedDest(
    ffi.Pointer<http_t> http,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> instance,
  ) {
    return _cupsGetNamedDest(
      http,
      name,
      instance,
    );
  }

  late final _cupsGetNamedDest_ptr =
      _lookup<ffi.NativeFunction<_c_cupsGetNamedDest>>('cupsGetNamedDest');
  late final _dart_cupsGetNamedDest _cupsGetNamedDest =
      _cupsGetNamedDest_ptr.asFunction<_dart_cupsGetNamedDest>();

  ffi.Pointer<ffi.Int8> cupsGetPassword2(
    ffi.Pointer<ffi.Int8> prompt,
    ffi.Pointer<http_t> http,
    ffi.Pointer<ffi.Int8> method,
    ffi.Pointer<ffi.Int8> resource,
  ) {
    return _cupsGetPassword2(
      prompt,
      http,
      method,
      resource,
    );
  }

  late final _cupsGetPassword2_ptr =
      _lookup<ffi.NativeFunction<_c_cupsGetPassword2>>('cupsGetPassword2');
  late final _dart_cupsGetPassword2 _cupsGetPassword2 =
      _cupsGetPassword2_ptr.asFunction<_dart_cupsGetPassword2>();

  ffi.Pointer<ipp_t> cupsGetResponse(
    ffi.Pointer<http_t> http,
    ffi.Pointer<ffi.Int8> resource,
  ) {
    return _cupsGetResponse(
      http,
      resource,
    );
  }

  late final _cupsGetResponse_ptr =
      _lookup<ffi.NativeFunction<_c_cupsGetResponse>>('cupsGetResponse');
  late final _dart_cupsGetResponse _cupsGetResponse =
      _cupsGetResponse_ptr.asFunction<_dart_cupsGetResponse>();

  int cupsReadResponseData(
    ffi.Pointer<http_t> http,
    ffi.Pointer<ffi.Int8> buffer,
    int length,
  ) {
    return _cupsReadResponseData(
      http,
      buffer,
      length,
    );
  }

  late final _cupsReadResponseData_ptr =
      _lookup<ffi.NativeFunction<_c_cupsReadResponseData>>(
          'cupsReadResponseData');
  late final _dart_cupsReadResponseData _cupsReadResponseData =
      _cupsReadResponseData_ptr.asFunction<_dart_cupsReadResponseData>();

  int cupsSendRequest(
    ffi.Pointer<http_t> http,
    ffi.Pointer<ipp_t> request,
    ffi.Pointer<ffi.Int8> resource,
    int length,
  ) {
    return _cupsSendRequest(
      http,
      request,
      resource,
      length,
    );
  }

  late final _cupsSendRequest_ptr =
      _lookup<ffi.NativeFunction<_c_cupsSendRequest>>('cupsSendRequest');
  late final _dart_cupsSendRequest _cupsSendRequest =
      _cupsSendRequest_ptr.asFunction<_dart_cupsSendRequest>();

  void cupsSetPasswordCB2(
    ffi.Pointer<ffi.NativeFunction<cups_password_cb2_t>> cb,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _cupsSetPasswordCB2(
      cb,
      user_data,
    );
  }

  late final _cupsSetPasswordCB2_ptr =
      _lookup<ffi.NativeFunction<_c_cupsSetPasswordCB2>>('cupsSetPasswordCB2');
  late final _dart_cupsSetPasswordCB2 _cupsSetPasswordCB2 =
      _cupsSetPasswordCB2_ptr.asFunction<_dart_cupsSetPasswordCB2>();

  int cupsStartDocument(
    ffi.Pointer<http_t> http,
    ffi.Pointer<ffi.Int8> name,
    int job_id,
    ffi.Pointer<ffi.Int8> docname,
    ffi.Pointer<ffi.Int8> format,
    int last_document,
  ) {
    return _cupsStartDocument(
      http,
      name,
      job_id,
      docname,
      format,
      last_document,
    );
  }

  late final _cupsStartDocument_ptr =
      _lookup<ffi.NativeFunction<_c_cupsStartDocument>>('cupsStartDocument');
  late final _dart_cupsStartDocument _cupsStartDocument =
      _cupsStartDocument_ptr.asFunction<_dart_cupsStartDocument>();

  int cupsWriteRequestData(
    ffi.Pointer<http_t> http,
    ffi.Pointer<ffi.Int8> buffer,
    int length,
  ) {
    return _cupsWriteRequestData(
      http,
      buffer,
      length,
    );
  }

  late final _cupsWriteRequestData_ptr =
      _lookup<ffi.NativeFunction<_c_cupsWriteRequestData>>(
          'cupsWriteRequestData');
  late final _dart_cupsWriteRequestData _cupsWriteRequestData =
      _cupsWriteRequestData_ptr.asFunction<_dart_cupsWriteRequestData>();

  /// New in CUPS 1.5/macOS 10.7
  void cupsSetClientCertCB(
    ffi.Pointer<ffi.NativeFunction<cups_client_cert_cb_t>> cb,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _cupsSetClientCertCB(
      cb,
      user_data,
    );
  }

  late final _cupsSetClientCertCB_ptr =
      _lookup<ffi.NativeFunction<_c_cupsSetClientCertCB>>(
          'cupsSetClientCertCB');
  late final _dart_cupsSetClientCertCB _cupsSetClientCertCB =
      _cupsSetClientCertCB_ptr.asFunction<_dart_cupsSetClientCertCB>();

  int cupsSetCredentials(
    ffi.Pointer<cups_array_t> certs,
  ) {
    return _cupsSetCredentials(
      certs,
    );
  }

  late final _cupsSetCredentials_ptr =
      _lookup<ffi.NativeFunction<_c_cupsSetCredentials>>('cupsSetCredentials');
  late final _dart_cupsSetCredentials _cupsSetCredentials =
      _cupsSetCredentials_ptr.asFunction<_dart_cupsSetCredentials>();

  void cupsSetServerCertCB(
    ffi.Pointer<ffi.NativeFunction<cups_server_cert_cb_t>> cb,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _cupsSetServerCertCB(
      cb,
      user_data,
    );
  }

  late final _cupsSetServerCertCB_ptr =
      _lookup<ffi.NativeFunction<_c_cupsSetServerCertCB>>(
          'cupsSetServerCertCB');
  late final _dart_cupsSetServerCertCB _cupsSetServerCertCB =
      _cupsSetServerCertCB_ptr.asFunction<_dart_cupsSetServerCertCB>();

  /// New in CUPS 1.6/macOS 10.8
  int cupsCancelDestJob(
    ffi.Pointer<http_t> http,
    ffi.Pointer<cups_dest_t> dest,
    int job_id,
  ) {
    return _cupsCancelDestJob(
      http,
      dest,
      job_id,
    );
  }

  late final _cupsCancelDestJob_ptr =
      _lookup<ffi.NativeFunction<_c_cupsCancelDestJob>>('cupsCancelDestJob');
  late final _dart_cupsCancelDestJob _cupsCancelDestJob =
      _cupsCancelDestJob_ptr.asFunction<_dart_cupsCancelDestJob>();

  int cupsCheckDestSupported(
    ffi.Pointer<http_t> http,
    ffi.Pointer<cups_dest_t> dest,
    ffi.Pointer<_cups_dinfo_s> info,
    ffi.Pointer<ffi.Int8> option,
    ffi.Pointer<ffi.Int8> value,
  ) {
    return _cupsCheckDestSupported(
      http,
      dest,
      info,
      option,
      value,
    );
  }

  late final _cupsCheckDestSupported_ptr =
      _lookup<ffi.NativeFunction<_c_cupsCheckDestSupported>>(
          'cupsCheckDestSupported');
  late final _dart_cupsCheckDestSupported _cupsCheckDestSupported =
      _cupsCheckDestSupported_ptr.asFunction<_dart_cupsCheckDestSupported>();

  int cupsCloseDestJob(
    ffi.Pointer<http_t> http,
    ffi.Pointer<cups_dest_t> dest,
    ffi.Pointer<_cups_dinfo_s> info,
    int job_id,
  ) {
    return _cupsCloseDestJob(
      http,
      dest,
      info,
      job_id,
    );
  }

  late final _cupsCloseDestJob_ptr =
      _lookup<ffi.NativeFunction<_c_cupsCloseDestJob>>('cupsCloseDestJob');
  late final _dart_cupsCloseDestJob _cupsCloseDestJob =
      _cupsCloseDestJob_ptr.asFunction<_dart_cupsCloseDestJob>();

  ffi.Pointer<http_t> cupsConnectDest(
    ffi.Pointer<cups_dest_t> dest,
    int flags,
    int msec,
    ffi.Pointer<ffi.Int32> cancel,
    ffi.Pointer<ffi.Int8> resource,
    int resourcesize,
    ffi.Pointer<ffi.NativeFunction<cups_dest_cb_t>> cb,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _cupsConnectDest(
      dest,
      flags,
      msec,
      cancel,
      resource,
      resourcesize,
      cb,
      user_data,
    );
  }

  late final _cupsConnectDest_ptr =
      _lookup<ffi.NativeFunction<_c_cupsConnectDest>>('cupsConnectDest');
  late final _dart_cupsConnectDest _cupsConnectDest =
      _cupsConnectDest_ptr.asFunction<_dart_cupsConnectDest>();

  int cupsCopyDest(
    ffi.Pointer<cups_dest_t> dest,
    int num_dests,
    ffi.Pointer<ffi.Pointer<cups_dest_t>> dests,
  ) {
    return _cupsCopyDest(
      dest,
      num_dests,
      dests,
    );
  }

  late final _cupsCopyDest_ptr =
      _lookup<ffi.NativeFunction<_c_cupsCopyDest>>('cupsCopyDest');
  late final _dart_cupsCopyDest _cupsCopyDest =
      _cupsCopyDest_ptr.asFunction<_dart_cupsCopyDest>();

  ffi.Pointer<_cups_dinfo_s> cupsCopyDestInfo(
    ffi.Pointer<http_t> http,
    ffi.Pointer<cups_dest_t> dest,
  ) {
    return _cupsCopyDestInfo(
      http,
      dest,
    );
  }

  late final _cupsCopyDestInfo_ptr =
      _lookup<ffi.NativeFunction<_c_cupsCopyDestInfo>>('cupsCopyDestInfo');
  late final _dart_cupsCopyDestInfo _cupsCopyDestInfo =
      _cupsCopyDestInfo_ptr.asFunction<_dart_cupsCopyDestInfo>();

  int cupsCopyDestConflicts(
    ffi.Pointer<http_t> http,
    ffi.Pointer<cups_dest_t> dest,
    ffi.Pointer<_cups_dinfo_s> info,
    int num_options,
    ffi.Pointer<cups_option_t> options,
    ffi.Pointer<ffi.Int8> new_option,
    ffi.Pointer<ffi.Int8> new_value,
    ffi.Pointer<ffi.Int32> num_conflicts,
    ffi.Pointer<ffi.Pointer<cups_option_t>> conflicts,
    ffi.Pointer<ffi.Int32> num_resolved,
    ffi.Pointer<ffi.Pointer<cups_option_t>> resolved,
  ) {
    return _cupsCopyDestConflicts(
      http,
      dest,
      info,
      num_options,
      options,
      new_option,
      new_value,
      num_conflicts,
      conflicts,
      num_resolved,
      resolved,
    );
  }

  late final _cupsCopyDestConflicts_ptr =
      _lookup<ffi.NativeFunction<_c_cupsCopyDestConflicts>>(
          'cupsCopyDestConflicts');
  late final _dart_cupsCopyDestConflicts _cupsCopyDestConflicts =
      _cupsCopyDestConflicts_ptr.asFunction<_dart_cupsCopyDestConflicts>();

  int cupsCreateDestJob(
    ffi.Pointer<http_t> http,
    ffi.Pointer<cups_dest_t> dest,
    ffi.Pointer<_cups_dinfo_s> info,
    ffi.Pointer<ffi.Int32> job_id,
    ffi.Pointer<ffi.Int8> title,
    int num_options,
    ffi.Pointer<cups_option_t> options,
  ) {
    return _cupsCreateDestJob(
      http,
      dest,
      info,
      job_id,
      title,
      num_options,
      options,
    );
  }

  late final _cupsCreateDestJob_ptr =
      _lookup<ffi.NativeFunction<_c_cupsCreateDestJob>>('cupsCreateDestJob');
  late final _dart_cupsCreateDestJob _cupsCreateDestJob =
      _cupsCreateDestJob_ptr.asFunction<_dart_cupsCreateDestJob>();

  int cupsEnumDests(
    int flags,
    int msec,
    ffi.Pointer<ffi.Int32> cancel,
    int type,
    int mask,
    ffi.Pointer<ffi.NativeFunction<cups_dest_cb_t>> cb,
    ffi.Pointer<ffi.Void> user_data,
  ) {
    return _cupsEnumDests(
      flags,
      msec,
      cancel,
      type,
      mask,
      cb,
      user_data,
    );
  }

  late final _cupsEnumDests_ptr =
      _lookup<ffi.NativeFunction<_c_cupsEnumDests>>('cupsEnumDests');
  late final _dart_cupsEnumDests _cupsEnumDests =
      _cupsEnumDests_ptr.asFunction<_dart_cupsEnumDests>();

  int cupsFinishDestDocument(
    ffi.Pointer<http_t> http,
    ffi.Pointer<cups_dest_t> dest,
    ffi.Pointer<_cups_dinfo_s> info,
  ) {
    return _cupsFinishDestDocument(
      http,
      dest,
      info,
    );
  }

  late final _cupsFinishDestDocument_ptr =
      _lookup<ffi.NativeFunction<_c_cupsFinishDestDocument>>(
          'cupsFinishDestDocument');
  late final _dart_cupsFinishDestDocument _cupsFinishDestDocument =
      _cupsFinishDestDocument_ptr.asFunction<_dart_cupsFinishDestDocument>();

  void cupsFreeDestInfo(
    ffi.Pointer<_cups_dinfo_s> dinfo,
  ) {
    return _cupsFreeDestInfo(
      dinfo,
    );
  }

  late final _cupsFreeDestInfo_ptr =
      _lookup<ffi.NativeFunction<_c_cupsFreeDestInfo>>('cupsFreeDestInfo');
  late final _dart_cupsFreeDestInfo _cupsFreeDestInfo =
      _cupsFreeDestInfo_ptr.asFunction<_dart_cupsFreeDestInfo>();

  int cupsGetDestMediaByName(
    ffi.Pointer<http_t> http,
    ffi.Pointer<cups_dest_t> dest,
    ffi.Pointer<_cups_dinfo_s> dinfo,
    ffi.Pointer<ffi.Int8> media,
    int flags,
    ffi.Pointer<cups_size_t> size,
  ) {
    return _cupsGetDestMediaByName(
      http,
      dest,
      dinfo,
      media,
      flags,
      size,
    );
  }

  late final _cupsGetDestMediaByName_ptr =
      _lookup<ffi.NativeFunction<_c_cupsGetDestMediaByName>>(
          'cupsGetDestMediaByName');
  late final _dart_cupsGetDestMediaByName _cupsGetDestMediaByName =
      _cupsGetDestMediaByName_ptr.asFunction<_dart_cupsGetDestMediaByName>();

  int cupsGetDestMediaBySize(
    ffi.Pointer<http_t> http,
    ffi.Pointer<cups_dest_t> dest,
    ffi.Pointer<_cups_dinfo_s> dinfo,
    int width,
    int length,
    int flags,
    ffi.Pointer<cups_size_t> size,
  ) {
    return _cupsGetDestMediaBySize(
      http,
      dest,
      dinfo,
      width,
      length,
      flags,
      size,
    );
  }

  late final _cupsGetDestMediaBySize_ptr =
      _lookup<ffi.NativeFunction<_c_cupsGetDestMediaBySize>>(
          'cupsGetDestMediaBySize');
  late final _dart_cupsGetDestMediaBySize _cupsGetDestMediaBySize =
      _cupsGetDestMediaBySize_ptr.asFunction<_dart_cupsGetDestMediaBySize>();

  ffi.Pointer<ffi.Int8> cupsLocalizeDestOption(
    ffi.Pointer<http_t> http,
    ffi.Pointer<cups_dest_t> dest,
    ffi.Pointer<_cups_dinfo_s> info,
    ffi.Pointer<ffi.Int8> option,
  ) {
    return _cupsLocalizeDestOption(
      http,
      dest,
      info,
      option,
    );
  }

  late final _cupsLocalizeDestOption_ptr =
      _lookup<ffi.NativeFunction<_c_cupsLocalizeDestOption>>(
          'cupsLocalizeDestOption');
  late final _dart_cupsLocalizeDestOption _cupsLocalizeDestOption =
      _cupsLocalizeDestOption_ptr.asFunction<_dart_cupsLocalizeDestOption>();

  ffi.Pointer<ffi.Int8> cupsLocalizeDestValue(
    ffi.Pointer<http_t> http,
    ffi.Pointer<cups_dest_t> dest,
    ffi.Pointer<_cups_dinfo_s> info,
    ffi.Pointer<ffi.Int8> option,
    ffi.Pointer<ffi.Int8> value,
  ) {
    return _cupsLocalizeDestValue(
      http,
      dest,
      info,
      option,
      value,
    );
  }

  late final _cupsLocalizeDestValue_ptr =
      _lookup<ffi.NativeFunction<_c_cupsLocalizeDestValue>>(
          'cupsLocalizeDestValue');
  late final _dart_cupsLocalizeDestValue _cupsLocalizeDestValue =
      _cupsLocalizeDestValue_ptr.asFunction<_dart_cupsLocalizeDestValue>();

  int cupsStartDestDocument(
    ffi.Pointer<http_t> http,
    ffi.Pointer<cups_dest_t> dest,
    ffi.Pointer<_cups_dinfo_s> info,
    int job_id,
    ffi.Pointer<ffi.Int8> docname,
    ffi.Pointer<ffi.Int8> format,
    int num_options,
    ffi.Pointer<cups_option_t> options,
    int last_document,
  ) {
    return _cupsStartDestDocument(
      http,
      dest,
      info,
      job_id,
      docname,
      format,
      num_options,
      options,
      last_document,
    );
  }

  late final _cupsStartDestDocument_ptr =
      _lookup<ffi.NativeFunction<_c_cupsStartDestDocument>>(
          'cupsStartDestDocument');
  late final _dart_cupsStartDestDocument _cupsStartDestDocument =
      _cupsStartDestDocument_ptr.asFunction<_dart_cupsStartDestDocument>();

  ffi.Pointer<ipp_attribute_t> cupsFindDestDefault(
    ffi.Pointer<http_t> http,
    ffi.Pointer<cups_dest_t> dest,
    ffi.Pointer<_cups_dinfo_s> dinfo,
    ffi.Pointer<ffi.Int8> option,
  ) {
    return _cupsFindDestDefault(
      http,
      dest,
      dinfo,
      option,
    );
  }

  late final _cupsFindDestDefault_ptr =
      _lookup<ffi.NativeFunction<_c_cupsFindDestDefault>>(
          'cupsFindDestDefault');
  late final _dart_cupsFindDestDefault _cupsFindDestDefault =
      _cupsFindDestDefault_ptr.asFunction<_dart_cupsFindDestDefault>();

  ffi.Pointer<ipp_attribute_t> cupsFindDestReady(
    ffi.Pointer<http_t> http,
    ffi.Pointer<cups_dest_t> dest,
    ffi.Pointer<_cups_dinfo_s> dinfo,
    ffi.Pointer<ffi.Int8> option,
  ) {
    return _cupsFindDestReady(
      http,
      dest,
      dinfo,
      option,
    );
  }

  late final _cupsFindDestReady_ptr =
      _lookup<ffi.NativeFunction<_c_cupsFindDestReady>>('cupsFindDestReady');
  late final _dart_cupsFindDestReady _cupsFindDestReady =
      _cupsFindDestReady_ptr.asFunction<_dart_cupsFindDestReady>();

  ffi.Pointer<ipp_attribute_t> cupsFindDestSupported(
    ffi.Pointer<http_t> http,
    ffi.Pointer<cups_dest_t> dest,
    ffi.Pointer<_cups_dinfo_s> dinfo,
    ffi.Pointer<ffi.Int8> option,
  ) {
    return _cupsFindDestSupported(
      http,
      dest,
      dinfo,
      option,
    );
  }

  late final _cupsFindDestSupported_ptr =
      _lookup<ffi.NativeFunction<_c_cupsFindDestSupported>>(
          'cupsFindDestSupported');
  late final _dart_cupsFindDestSupported _cupsFindDestSupported =
      _cupsFindDestSupported_ptr.asFunction<_dart_cupsFindDestSupported>();

  int cupsGetDestMediaByIndex(
    ffi.Pointer<http_t> http,
    ffi.Pointer<cups_dest_t> dest,
    ffi.Pointer<_cups_dinfo_s> dinfo,
    int n,
    int flags,
    ffi.Pointer<cups_size_t> size,
  ) {
    return _cupsGetDestMediaByIndex(
      http,
      dest,
      dinfo,
      n,
      flags,
      size,
    );
  }

  late final _cupsGetDestMediaByIndex_ptr =
      _lookup<ffi.NativeFunction<_c_cupsGetDestMediaByIndex>>(
          'cupsGetDestMediaByIndex');
  late final _dart_cupsGetDestMediaByIndex _cupsGetDestMediaByIndex =
      _cupsGetDestMediaByIndex_ptr.asFunction<_dart_cupsGetDestMediaByIndex>();

  int cupsGetDestMediaCount(
    ffi.Pointer<http_t> http,
    ffi.Pointer<cups_dest_t> dest,
    ffi.Pointer<_cups_dinfo_s> dinfo,
    int flags,
  ) {
    return _cupsGetDestMediaCount(
      http,
      dest,
      dinfo,
      flags,
    );
  }

  late final _cupsGetDestMediaCount_ptr =
      _lookup<ffi.NativeFunction<_c_cupsGetDestMediaCount>>(
          'cupsGetDestMediaCount');
  late final _dart_cupsGetDestMediaCount _cupsGetDestMediaCount =
      _cupsGetDestMediaCount_ptr.asFunction<_dart_cupsGetDestMediaCount>();

  int cupsGetDestMediaDefault(
    ffi.Pointer<http_t> http,
    ffi.Pointer<cups_dest_t> dest,
    ffi.Pointer<_cups_dinfo_s> dinfo,
    int flags,
    ffi.Pointer<cups_size_t> size,
  ) {
    return _cupsGetDestMediaDefault(
      http,
      dest,
      dinfo,
      flags,
      size,
    );
  }

  late final _cupsGetDestMediaDefault_ptr =
      _lookup<ffi.NativeFunction<_c_cupsGetDestMediaDefault>>(
          'cupsGetDestMediaDefault');
  late final _dart_cupsGetDestMediaDefault _cupsGetDestMediaDefault =
      _cupsGetDestMediaDefault_ptr.asFunction<_dart_cupsGetDestMediaDefault>();

  void cupsSetUserAgent(
    ffi.Pointer<ffi.Int8> user_agent,
  ) {
    return _cupsSetUserAgent(
      user_agent,
    );
  }

  late final _cupsSetUserAgent_ptr =
      _lookup<ffi.NativeFunction<_c_cupsSetUserAgent>>('cupsSetUserAgent');
  late final _dart_cupsSetUserAgent _cupsSetUserAgent =
      _cupsSetUserAgent_ptr.asFunction<_dart_cupsSetUserAgent>();

  ffi.Pointer<ffi.Int8> cupsUserAgent() {
    return _cupsUserAgent();
  }

  late final _cupsUserAgent_ptr =
      _lookup<ffi.NativeFunction<_c_cupsUserAgent>>('cupsUserAgent');
  late final _dart_cupsUserAgent _cupsUserAgent =
      _cupsUserAgent_ptr.asFunction<_dart_cupsUserAgent>();

  ffi.Pointer<cups_dest_t> cupsGetDestWithURI(
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> uri,
  ) {
    return _cupsGetDestWithURI(
      name,
      uri,
    );
  }

  late final _cupsGetDestWithURI_ptr =
      _lookup<ffi.NativeFunction<_c_cupsGetDestWithURI>>('cupsGetDestWithURI');
  late final _dart_cupsGetDestWithURI _cupsGetDestWithURI =
      _cupsGetDestWithURI_ptr.asFunction<_dart_cupsGetDestWithURI>();

  ffi.Pointer<ffi.Int8> cupsLocalizeDestMedia(
    ffi.Pointer<http_t> http,
    ffi.Pointer<cups_dest_t> dest,
    ffi.Pointer<_cups_dinfo_s> info,
    int flags,
    ffi.Pointer<cups_size_t> size,
  ) {
    return _cupsLocalizeDestMedia(
      http,
      dest,
      info,
      flags,
      size,
    );
  }

  late final _cupsLocalizeDestMedia_ptr =
      _lookup<ffi.NativeFunction<_c_cupsLocalizeDestMedia>>(
          'cupsLocalizeDestMedia');
  late final _dart_cupsLocalizeDestMedia _cupsLocalizeDestMedia =
      _cupsLocalizeDestMedia_ptr.asFunction<_dart_cupsLocalizeDestMedia>();

  int cupsMakeServerCredentials(
    ffi.Pointer<ffi.Int8> path,
    ffi.Pointer<ffi.Int8> common_name,
    int num_alt_names,
    ffi.Pointer<ffi.Pointer<ffi.Int8>> alt_names,
    int expiration_date,
  ) {
    return _cupsMakeServerCredentials(
      path,
      common_name,
      num_alt_names,
      alt_names,
      expiration_date,
    );
  }

  late final _cupsMakeServerCredentials_ptr =
      _lookup<ffi.NativeFunction<_c_cupsMakeServerCredentials>>(
          'cupsMakeServerCredentials');
  late final _dart_cupsMakeServerCredentials _cupsMakeServerCredentials =
      _cupsMakeServerCredentials_ptr
          .asFunction<_dart_cupsMakeServerCredentials>();

  int cupsSetServerCredentials(
    ffi.Pointer<ffi.Int8> path,
    ffi.Pointer<ffi.Int8> common_name,
    int auto_create,
  ) {
    return _cupsSetServerCredentials(
      path,
      common_name,
      auto_create,
    );
  }

  late final _cupsSetServerCredentials_ptr =
      _lookup<ffi.NativeFunction<_c_cupsSetServerCredentials>>(
          'cupsSetServerCredentials');
  late final _dart_cupsSetServerCredentials _cupsSetServerCredentials =
      _cupsSetServerCredentials_ptr
          .asFunction<_dart_cupsSetServerCredentials>();

  int cupsHashData(
    ffi.Pointer<ffi.Int8> algorithm,
    ffi.Pointer<ffi.Void> data,
    int datalen,
    ffi.Pointer<ffi.Uint8> hash,
    int hashsize,
  ) {
    return _cupsHashData(
      algorithm,
      data,
      datalen,
      hash,
      hashsize,
    );
  }

  late final _cupsHashData_ptr =
      _lookup<ffi.NativeFunction<_c_cupsHashData>>('cupsHashData');
  late final _dart_cupsHashData _cupsHashData =
      _cupsHashData_ptr.asFunction<_dart_cupsHashData>();

  int cupsAddIntegerOption(
    ffi.Pointer<ffi.Int8> name,
    int value,
    int num_options,
    ffi.Pointer<ffi.Pointer<cups_option_t>> options,
  ) {
    return _cupsAddIntegerOption(
      name,
      value,
      num_options,
      options,
    );
  }

  late final _cupsAddIntegerOption_ptr =
      _lookup<ffi.NativeFunction<_c_cupsAddIntegerOption>>(
          'cupsAddIntegerOption');
  late final _dart_cupsAddIntegerOption _cupsAddIntegerOption =
      _cupsAddIntegerOption_ptr.asFunction<_dart_cupsAddIntegerOption>();

  int cupsGetIntegerOption(
    ffi.Pointer<ffi.Int8> name,
    int num_options,
    ffi.Pointer<cups_option_t> options,
  ) {
    return _cupsGetIntegerOption(
      name,
      num_options,
      options,
    );
  }

  late final _cupsGetIntegerOption_ptr =
      _lookup<ffi.NativeFunction<_c_cupsGetIntegerOption>>(
          'cupsGetIntegerOption');
  late final _dart_cupsGetIntegerOption _cupsGetIntegerOption =
      _cupsGetIntegerOption_ptr.asFunction<_dart_cupsGetIntegerOption>();

  ffi.Pointer<ffi.Int8> cupsHashString(
    ffi.Pointer<ffi.Uint8> hash,
    int hashsize,
    ffi.Pointer<ffi.Int8> buffer,
    int bufsize,
  ) {
    return _cupsHashString(
      hash,
      hashsize,
      buffer,
      bufsize,
    );
  }

  late final _cupsHashString_ptr =
      _lookup<ffi.NativeFunction<_c_cupsHashString>>('cupsHashString');
  late final _dart_cupsHashString _cupsHashString =
      _cupsHashString_ptr.asFunction<_dart_cupsHashString>();

  int cupsAddDestMediaOptions(
    ffi.Pointer<http_t> http,
    ffi.Pointer<cups_dest_t> dest,
    ffi.Pointer<_cups_dinfo_s> dinfo,
    int flags,
    ffi.Pointer<cups_size_t> size,
    int num_options,
    ffi.Pointer<ffi.Pointer<cups_option_t>> options,
  ) {
    return _cupsAddDestMediaOptions(
      http,
      dest,
      dinfo,
      flags,
      size,
      num_options,
      options,
    );
  }

  late final _cupsAddDestMediaOptions_ptr =
      _lookup<ffi.NativeFunction<_c_cupsAddDestMediaOptions>>(
          'cupsAddDestMediaOptions');
  late final _dart_cupsAddDestMediaOptions _cupsAddDestMediaOptions =
      _cupsAddDestMediaOptions_ptr.asFunction<_dart_cupsAddDestMediaOptions>();

  ffi.Pointer<ipp_attribute_t> cupsEncodeOption(
    ffi.Pointer<ipp_t> ipp,
    int group_tag,
    ffi.Pointer<ffi.Int8> name,
    ffi.Pointer<ffi.Int8> value,
  ) {
    return _cupsEncodeOption(
      ipp,
      group_tag,
      name,
      value,
    );
  }

  late final _cupsEncodeOption_ptr =
      _lookup<ffi.NativeFunction<_c_cupsEncodeOption>>('cupsEncodeOption');
  late final _dart_cupsEncodeOption _cupsEncodeOption =
      _cupsEncodeOption_ptr.asFunction<_dart_cupsEncodeOption>();
}

abstract class cups_ptype_e {
  static const int CUPS_PRINTER_LOCAL = 0;
  static const int CUPS_PRINTER_CLASS = 1;
  static const int CUPS_PRINTER_REMOTE = 2;
  static const int CUPS_PRINTER_BW = 4;
  static const int CUPS_PRINTER_COLOR = 8;
  static const int CUPS_PRINTER_DUPLEX = 16;
  static const int CUPS_PRINTER_STAPLE = 32;
  static const int CUPS_PRINTER_COPIES = 64;
  static const int CUPS_PRINTER_COLLATE = 128;
  static const int CUPS_PRINTER_PUNCH = 256;
  static const int CUPS_PRINTER_COVER = 512;
  static const int CUPS_PRINTER_BIND = 1024;
  static const int CUPS_PRINTER_SORT = 2048;
  static const int CUPS_PRINTER_SMALL = 4096;
  static const int CUPS_PRINTER_MEDIUM = 8192;
  static const int CUPS_PRINTER_LARGE = 16384;
  static const int CUPS_PRINTER_VARIABLE = 32768;
  static const int CUPS_PRINTER_IMPLICIT = 65536;
  static const int CUPS_PRINTER_DEFAULT = 131072;
  static const int CUPS_PRINTER_FAX = 262144;
  static const int CUPS_PRINTER_REJECTING = 524288;
  static const int CUPS_PRINTER_DELETE = 1048576;
  static const int CUPS_PRINTER_NOT_SHARED = 2097152;
  static const int CUPS_PRINTER_AUTHENTICATED = 4194304;
  static const int CUPS_PRINTER_COMMANDS = 8388608;
  static const int CUPS_PRINTER_DISCOVERED = 16777216;
  static const int CUPS_PRINTER_SCANNER = 33554432;
  static const int CUPS_PRINTER_MFP = 67108864;
  static const int CUPS_PRINTER_3D = 134217728;
  static const int CUPS_PRINTER_OPTIONS = 458748;
}

class cups_option_t extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  external ffi.Pointer<ffi.Int8> value;
}

class cups_dest_t extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  external ffi.Pointer<ffi.Int8> instance;

  @ffi.Int32()
  external int is_default;

  @ffi.Int32()
  external int num_options;

  external ffi.Pointer<cups_option_t> options;
}

class _cups_dinfo_s extends ffi.Opaque {}

class cups_job_t extends ffi.Struct {
  @ffi.Int32()
  external int id;

  external ffi.Pointer<ffi.Int8> dest;

  external ffi.Pointer<ffi.Int8> title;

  external ffi.Pointer<ffi.Int8> user;

  external ffi.Pointer<ffi.Int8> format;

  @ffi.Int32()
  external int state;

  @ffi.Int32()
  external int size;

  @ffi.Int32()
  external int priority;

  @ffi.Int64()
  external int completed_time;

  @ffi.Int64()
  external int creation_time;

  @ffi.Int64()
  external int processing_time;
}

class cups_size_t extends ffi.Struct {
  @ffi.Array.multi([128])
  external ffi.Array<ffi.Int8> media;

  @ffi.Int32()
  external int width;

  @ffi.Int32()
  external int length;

  @ffi.Int32()
  external int bottom;

  @ffi.Int32()
  external int left;

  @ffi.Int32()
  external int right;

  @ffi.Int32()
  external int top;
}

class ipp_t extends ffi.Opaque {}

class http_t extends ffi.Opaque {}

class cups_array_t extends ffi.Opaque {}

class cups_lang_t extends ffi.Struct {
  external ffi.Pointer<cups_lang_t> next;

  @ffi.Int32()
  external int used;

  @ffi.Int32()
  external int encoding;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Int8> language;

  external ffi.Pointer<cups_array_t> strings;
}

class cups_file_t extends ffi.Opaque {}

class ipp_attribute_t extends ffi.Opaque {}

const double CUPS_VERSION = 2.0303;

const int CUPS_VERSION_MAJOR = 2;

const int CUPS_VERSION_MINOR = 3;

const int CUPS_VERSION_PATCH = 3;

const int CUPS_BC_FD = 3;

const int CUPS_DATE_ANY = -1;

const String CUPS_FORMAT_AUTO = 'application/octet-stream';

const String CUPS_FORMAT_COMMAND = 'application/vnd.cups-command';

const String CUPS_FORMAT_JPEG = 'image/jpeg';

const String CUPS_FORMAT_PDF = 'application/pdf';

const String CUPS_FORMAT_POSTSCRIPT = 'application/postscript';

const String CUPS_FORMAT_RAW = 'application/vnd.cups-raw';

const String CUPS_FORMAT_TEXT = 'text/plain';

const int CUPS_JOBID_ALL = -1;

const int CUPS_JOBID_CURRENT = 0;

const int CUPS_LENGTH_VARIABLE = 0;

const int CUPS_TIMEOUT_DEFAULT = 0;

const int CUPS_WHICHJOBS_ALL = -1;

const int CUPS_WHICHJOBS_ACTIVE = 0;

const int CUPS_WHICHJOBS_COMPLETED = 1;

const int CUPS_DEST_FLAGS_NONE = 0;

const int CUPS_DEST_FLAGS_UNCONNECTED = 1;

const int CUPS_DEST_FLAGS_MORE = 2;

const int CUPS_DEST_FLAGS_REMOVED = 4;

const int CUPS_DEST_FLAGS_ERROR = 8;

const int CUPS_DEST_FLAGS_RESOLVING = 16;

const int CUPS_DEST_FLAGS_CONNECTING = 32;

const int CUPS_DEST_FLAGS_CANCELED = 64;

const int CUPS_DEST_FLAGS_DEVICE = 128;

const int CUPS_MEDIA_FLAGS_DEFAULT = 0;

const int CUPS_MEDIA_FLAGS_BORDERLESS = 1;

const int CUPS_MEDIA_FLAGS_DUPLEX = 2;

const int CUPS_MEDIA_FLAGS_EXACT = 4;

const int CUPS_MEDIA_FLAGS_READY = 8;

const String CUPS_COPIES = 'copies';

const String CUPS_COPIES_SUPPORTED = 'copies-supported';

const String CUPS_FINISHINGS = 'finishings';

const String CUPS_FINISHINGS_SUPPORTED = 'finishings-supported';

const String CUPS_FINISHINGS_BIND = '7';

const String CUPS_FINISHINGS_COVER = '6';

const String CUPS_FINISHINGS_FOLD = '10';

const String CUPS_FINISHINGS_NONE = '3';

const String CUPS_FINISHINGS_PUNCH = '5';

const String CUPS_FINISHINGS_STAPLE = '4';

const String CUPS_FINISHINGS_TRIM = '11';

const String CUPS_MEDIA = 'media';

const String CUPS_MEDIA_READY = 'media-ready';

const String CUPS_MEDIA_SUPPORTED = 'media-supported';

const String CUPS_MEDIA_3X5 = 'na_index-3x5_3x5in';

const String CUPS_MEDIA_4X6 = 'na_index-4x6_4x6in';

const String CUPS_MEDIA_5X7 = 'na_5x7_5x7in';

const String CUPS_MEDIA_8X10 = 'na_govt-letter_8x10in';

const String CUPS_MEDIA_A3 = 'iso_a3_297x420mm';

const String CUPS_MEDIA_A4 = 'iso_a4_210x297mm';

const String CUPS_MEDIA_A5 = 'iso_a5_148x210mm';

const String CUPS_MEDIA_A6 = 'iso_a6_105x148mm';

const String CUPS_MEDIA_ENV10 = 'na_number-10_4.125x9.5in';

const String CUPS_MEDIA_ENVDL = 'iso_dl_110x220mm';

const String CUPS_MEDIA_LEGAL = 'na_legal_8.5x14in';

const String CUPS_MEDIA_LETTER = 'na_letter_8.5x11in';

const String CUPS_MEDIA_PHOTO_L = 'oe_photo-l_3.5x5in';

const String CUPS_MEDIA_SUPERBA3 = 'na_super-b_13x19in';

const String CUPS_MEDIA_TABLOID = 'na_ledger_11x17in';

const String CUPS_MEDIA_SOURCE = 'media-source';

const String CUPS_MEDIA_SOURCE_SUPPORTED = 'media-source-supported';

const String CUPS_MEDIA_SOURCE_AUTO = 'auto';

const String CUPS_MEDIA_SOURCE_MANUAL = 'manual';

const String CUPS_MEDIA_TYPE = 'media-type';

const String CUPS_MEDIA_TYPE_SUPPORTED = 'media-type-supported';

const String CUPS_MEDIA_TYPE_AUTO = 'auto';

const String CUPS_MEDIA_TYPE_ENVELOPE = 'envelope';

const String CUPS_MEDIA_TYPE_LABELS = 'labels';

const String CUPS_MEDIA_TYPE_LETTERHEAD = 'stationery-letterhead';

const String CUPS_MEDIA_TYPE_PHOTO = 'photographic';

const String CUPS_MEDIA_TYPE_PHOTO_GLOSSY = 'photographic-glossy';

const String CUPS_MEDIA_TYPE_PHOTO_MATTE = 'photographic-matte';

const String CUPS_MEDIA_TYPE_PLAIN = 'stationery';

const String CUPS_MEDIA_TYPE_TRANSPARENCY = 'transparency';

const String CUPS_NUMBER_UP = 'number-up';

const String CUPS_NUMBER_UP_SUPPORTED = 'number-up-supported';

const String CUPS_ORIENTATION = 'orientation-requested';

const String CUPS_ORIENTATION_SUPPORTED = 'orientation-requested-supported';

const String CUPS_ORIENTATION_PORTRAIT = '3';

const String CUPS_ORIENTATION_LANDSCAPE = '4';

const String CUPS_PRINT_COLOR_MODE = 'print-color-mode';

const String CUPS_PRINT_COLOR_MODE_SUPPORTED = 'print-color-mode-supported';

const String CUPS_PRINT_COLOR_MODE_AUTO = 'auto';

const String CUPS_PRINT_COLOR_MODE_MONOCHROME = 'monochrome';

const String CUPS_PRINT_COLOR_MODE_COLOR = 'color';

const String CUPS_PRINT_QUALITY = 'print-quality';

const String CUPS_PRINT_QUALITY_SUPPORTED = 'print-quality-supported';

const String CUPS_PRINT_QUALITY_DRAFT = '3';

const String CUPS_PRINT_QUALITY_NORMAL = '4';

const String CUPS_PRINT_QUALITY_HIGH = '5';

const String CUPS_SIDES = 'sides';

const String CUPS_SIDES_SUPPORTED = 'sides-supported';

const String CUPS_SIDES_ONE_SIDED = 'one-sided';

const String CUPS_SIDES_TWO_SIDED_PORTRAIT = 'two-sided-long-edge';

const String CUPS_SIDES_TWO_SIDED_LANDSCAPE = 'two-sided-short-edge';

typedef _c_cupsCancelJob = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Int32 job_id,
);

typedef _dart_cupsCancelJob = int Function(
  ffi.Pointer<ffi.Int8> name,
  int job_id,
);

typedef _c_cupsDoFileRequest = ffi.Pointer<ipp_t> Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<ipp_t> request,
  ffi.Pointer<ffi.Int8> resource,
  ffi.Pointer<ffi.Int8> filename,
);

typedef _dart_cupsDoFileRequest = ffi.Pointer<ipp_t> Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<ipp_t> request,
  ffi.Pointer<ffi.Int8> resource,
  ffi.Pointer<ffi.Int8> filename,
);

typedef _c_cupsDoRequest = ffi.Pointer<ipp_t> Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<ipp_t> request,
  ffi.Pointer<ffi.Int8> resource,
);

typedef _dart_cupsDoRequest = ffi.Pointer<ipp_t> Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<ipp_t> request,
  ffi.Pointer<ffi.Int8> resource,
);

typedef _c_cupsEncryption = ffi.Int32 Function();

typedef _dart_cupsEncryption = int Function();

typedef _c_cupsFreeJobs = ffi.Void Function(
  ffi.Int32 num_jobs,
  ffi.Pointer<cups_job_t> jobs,
);

typedef _dart_cupsFreeJobs = void Function(
  int num_jobs,
  ffi.Pointer<cups_job_t> jobs,
);

typedef _c_cupsGetClasses = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> classes,
);

typedef _dart_cupsGetClasses = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> classes,
);

typedef _c_cupsGetDefault = ffi.Pointer<ffi.Int8> Function();

typedef _dart_cupsGetDefault = ffi.Pointer<ffi.Int8> Function();

typedef _c_cupsGetJobs = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<cups_job_t>> jobs,
  ffi.Pointer<ffi.Int8> name,
  ffi.Int32 myjobs,
  ffi.Int32 whichjobs,
);

typedef _dart_cupsGetJobs = int Function(
  ffi.Pointer<ffi.Pointer<cups_job_t>> jobs,
  ffi.Pointer<ffi.Int8> name,
  int myjobs,
  int whichjobs,
);

typedef _c_cupsGetPrinters = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> printers,
);

typedef _dart_cupsGetPrinters = int Function(
  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> printers,
);

typedef _c_cupsLastError = ffi.Int32 Function();

typedef _dart_cupsLastError = int Function();

typedef _c_cupsPrintFile = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<ffi.Int8> title,
  ffi.Int32 num_options,
  ffi.Pointer<cups_option_t> options,
);

typedef _dart_cupsPrintFile = int Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<ffi.Int8> title,
  int num_options,
  ffi.Pointer<cups_option_t> options,
);

typedef _c_cupsPrintFiles = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Int32 num_files,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> files,
  ffi.Pointer<ffi.Int8> title,
  ffi.Int32 num_options,
  ffi.Pointer<cups_option_t> options,
);

typedef _dart_cupsPrintFiles = int Function(
  ffi.Pointer<ffi.Int8> name,
  int num_files,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> files,
  ffi.Pointer<ffi.Int8> title,
  int num_options,
  ffi.Pointer<cups_option_t> options,
);

typedef _c_cupsTempFile = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> filename,
  ffi.Int32 len,
);

typedef _dart_cupsTempFile = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> filename,
  int len,
);

typedef _c_cupsTempFd = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> filename,
  ffi.Int32 len,
);

typedef _dart_cupsTempFd = int Function(
  ffi.Pointer<ffi.Int8> filename,
  int len,
);

typedef _c_cupsAddDest = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> instance,
  ffi.Int32 num_dests,
  ffi.Pointer<ffi.Pointer<cups_dest_t>> dests,
);

typedef _dart_cupsAddDest = int Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> instance,
  int num_dests,
  ffi.Pointer<ffi.Pointer<cups_dest_t>> dests,
);

typedef _c_cupsFreeDests = ffi.Void Function(
  ffi.Int32 num_dests,
  ffi.Pointer<cups_dest_t> dests,
);

typedef _dart_cupsFreeDests = void Function(
  int num_dests,
  ffi.Pointer<cups_dest_t> dests,
);

typedef _c_cupsGetDest = ffi.Pointer<cups_dest_t> Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> instance,
  ffi.Int32 num_dests,
  ffi.Pointer<cups_dest_t> dests,
);

typedef _dart_cupsGetDest = ffi.Pointer<cups_dest_t> Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> instance,
  int num_dests,
  ffi.Pointer<cups_dest_t> dests,
);

typedef _c_cupsGetDests = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<cups_dest_t>> dests,
);

typedef _dart_cupsGetDests = int Function(
  ffi.Pointer<ffi.Pointer<cups_dest_t>> dests,
);

typedef _c_cupsSetDests = ffi.Void Function(
  ffi.Int32 num_dests,
  ffi.Pointer<cups_dest_t> dests,
);

typedef _dart_cupsSetDests = void Function(
  int num_dests,
  ffi.Pointer<cups_dest_t> dests,
);

typedef _c_cupsAddOption = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> value,
  ffi.Int32 num_options,
  ffi.Pointer<ffi.Pointer<cups_option_t>> options,
);

typedef _dart_cupsAddOption = int Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> value,
  int num_options,
  ffi.Pointer<ffi.Pointer<cups_option_t>> options,
);

typedef _c_cupsEncodeOptions = ffi.Void Function(
  ffi.Pointer<ipp_t> ipp,
  ffi.Int32 num_options,
  ffi.Pointer<cups_option_t> options,
);

typedef _dart_cupsEncodeOptions = void Function(
  ffi.Pointer<ipp_t> ipp,
  int num_options,
  ffi.Pointer<cups_option_t> options,
);

typedef _c_cupsFreeOptions = ffi.Void Function(
  ffi.Int32 num_options,
  ffi.Pointer<cups_option_t> options,
);

typedef _dart_cupsFreeOptions = void Function(
  int num_options,
  ffi.Pointer<cups_option_t> options,
);

typedef _c_cupsGetOption = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Int32 num_options,
  ffi.Pointer<cups_option_t> options,
);

typedef _dart_cupsGetOption = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> name,
  int num_options,
  ffi.Pointer<cups_option_t> options,
);

typedef _c_cupsParseOptions = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> arg,
  ffi.Int32 num_options,
  ffi.Pointer<ffi.Pointer<cups_option_t>> options,
);

typedef _dart_cupsParseOptions = int Function(
  ffi.Pointer<ffi.Int8> arg,
  int num_options,
  ffi.Pointer<ffi.Pointer<cups_option_t>> options,
);

typedef _c_cupsGetPassword = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> prompt,
);

typedef _dart_cupsGetPassword = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> prompt,
);

typedef _c_cupsServer = ffi.Pointer<ffi.Int8> Function();

typedef _dart_cupsServer = ffi.Pointer<ffi.Int8> Function();

typedef _c_cupsSetEncryption = ffi.Void Function(
  ffi.Int32 e,
);

typedef _dart_cupsSetEncryption = void Function(
  int e,
);

typedef cups_password_cb_t = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8>,
);

typedef _c_cupsSetPasswordCB = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<cups_password_cb_t>> cb,
);

typedef _dart_cupsSetPasswordCB = void Function(
  ffi.Pointer<ffi.NativeFunction<cups_password_cb_t>> cb,
);

typedef _c_cupsSetServer = ffi.Void Function(
  ffi.Pointer<ffi.Int8> server,
);

typedef _dart_cupsSetServer = void Function(
  ffi.Pointer<ffi.Int8> server,
);

typedef _c_cupsSetUser = ffi.Void Function(
  ffi.Pointer<ffi.Int8> user,
);

typedef _dart_cupsSetUser = void Function(
  ffi.Pointer<ffi.Int8> user,
);

typedef _c_cupsUser = ffi.Pointer<ffi.Int8> Function();

typedef _dart_cupsUser = ffi.Pointer<ffi.Int8> Function();

typedef _c_cupsDoAuthentication = ffi.Int32 Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<ffi.Int8> method,
  ffi.Pointer<ffi.Int8> resource,
);

typedef _dart_cupsDoAuthentication = int Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<ffi.Int8> method,
  ffi.Pointer<ffi.Int8> resource,
);

typedef _c_cupsGetFile = ffi.Int32 Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<ffi.Int8> resource,
  ffi.Pointer<ffi.Int8> filename,
);

typedef _dart_cupsGetFile = int Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<ffi.Int8> resource,
  ffi.Pointer<ffi.Int8> filename,
);

typedef _c_cupsGetFd = ffi.Int32 Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<ffi.Int8> resource,
  ffi.Int32 fd,
);

typedef _dart_cupsGetFd = int Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<ffi.Int8> resource,
  int fd,
);

typedef _c_cupsPutFile = ffi.Int32 Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<ffi.Int8> resource,
  ffi.Pointer<ffi.Int8> filename,
);

typedef _dart_cupsPutFile = int Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<ffi.Int8> resource,
  ffi.Pointer<ffi.Int8> filename,
);

typedef _c_cupsPutFd = ffi.Int32 Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<ffi.Int8> resource,
  ffi.Int32 fd,
);

typedef _dart_cupsPutFd = int Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<ffi.Int8> resource,
  int fd,
);

typedef _c_cupsGetDefault2 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<http_t> http,
);

typedef _dart_cupsGetDefault2 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<http_t> http,
);

typedef _c_cupsGetDests2 = ffi.Int32 Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<ffi.Pointer<cups_dest_t>> dests,
);

typedef _dart_cupsGetDests2 = int Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<ffi.Pointer<cups_dest_t>> dests,
);

typedef _c_cupsGetJobs2 = ffi.Int32 Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<ffi.Pointer<cups_job_t>> jobs,
  ffi.Pointer<ffi.Int8> name,
  ffi.Int32 myjobs,
  ffi.Int32 whichjobs,
);

typedef _dart_cupsGetJobs2 = int Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<ffi.Pointer<cups_job_t>> jobs,
  ffi.Pointer<ffi.Int8> name,
  int myjobs,
  int whichjobs,
);

typedef _c_cupsPrintFile2 = ffi.Int32 Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<ffi.Int8> title,
  ffi.Int32 num_options,
  ffi.Pointer<cups_option_t> options,
);

typedef _dart_cupsPrintFile2 = int Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> filename,
  ffi.Pointer<ffi.Int8> title,
  int num_options,
  ffi.Pointer<cups_option_t> options,
);

typedef _c_cupsPrintFiles2 = ffi.Int32 Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<ffi.Int8> name,
  ffi.Int32 num_files,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> files,
  ffi.Pointer<ffi.Int8> title,
  ffi.Int32 num_options,
  ffi.Pointer<cups_option_t> options,
);

typedef _dart_cupsPrintFiles2 = int Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<ffi.Int8> name,
  int num_files,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> files,
  ffi.Pointer<ffi.Int8> title,
  int num_options,
  ffi.Pointer<cups_option_t> options,
);

typedef _c_cupsSetDests2 = ffi.Int32 Function(
  ffi.Pointer<http_t> http,
  ffi.Int32 num_dests,
  ffi.Pointer<cups_dest_t> dests,
);

typedef _dart_cupsSetDests2 = int Function(
  ffi.Pointer<http_t> http,
  int num_dests,
  ffi.Pointer<cups_dest_t> dests,
);

typedef _c_cupsEncodeOptions2 = ffi.Void Function(
  ffi.Pointer<ipp_t> ipp,
  ffi.Int32 num_options,
  ffi.Pointer<cups_option_t> options,
  ffi.Int32 group_tag,
);

typedef _dart_cupsEncodeOptions2 = void Function(
  ffi.Pointer<ipp_t> ipp,
  int num_options,
  ffi.Pointer<cups_option_t> options,
  int group_tag,
);

typedef _c_cupsLastErrorString = ffi.Pointer<ffi.Int8> Function();

typedef _dart_cupsLastErrorString = ffi.Pointer<ffi.Int8> Function();

typedef _c_cupsNotifySubject = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<cups_lang_t> lang,
  ffi.Pointer<ipp_t> event,
);

typedef _dart_cupsNotifySubject = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<cups_lang_t> lang,
  ffi.Pointer<ipp_t> event,
);

typedef _c_cupsNotifyText = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<cups_lang_t> lang,
  ffi.Pointer<ipp_t> event,
);

typedef _dart_cupsNotifyText = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<cups_lang_t> lang,
  ffi.Pointer<ipp_t> event,
);

typedef _c_cupsRemoveOption = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Int32 num_options,
  ffi.Pointer<ffi.Pointer<cups_option_t>> options,
);

typedef _dart_cupsRemoveOption = int Function(
  ffi.Pointer<ffi.Int8> name,
  int num_options,
  ffi.Pointer<ffi.Pointer<cups_option_t>> options,
);

typedef _c_cupsTempFile2 = ffi.Pointer<cups_file_t> Function(
  ffi.Pointer<ffi.Int8> filename,
  ffi.Int32 len,
);

typedef _dart_cupsTempFile2 = ffi.Pointer<cups_file_t> Function(
  ffi.Pointer<ffi.Int8> filename,
  int len,
);

typedef _c_cupsDoIORequest = ffi.Pointer<ipp_t> Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<ipp_t> request,
  ffi.Pointer<ffi.Int8> resource,
  ffi.Int32 infile,
  ffi.Int32 outfile,
);

typedef _dart_cupsDoIORequest = ffi.Pointer<ipp_t> Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<ipp_t> request,
  ffi.Pointer<ffi.Int8> resource,
  int infile,
  int outfile,
);

typedef _c_cupsRemoveDest = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> instance,
  ffi.Int32 num_dests,
  ffi.Pointer<ffi.Pointer<cups_dest_t>> dests,
);

typedef _dart_cupsRemoveDest = int Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> instance,
  int num_dests,
  ffi.Pointer<ffi.Pointer<cups_dest_t>> dests,
);

typedef _c_cupsSetDefaultDest = ffi.Void Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> instance,
  ffi.Int32 num_dests,
  ffi.Pointer<cups_dest_t> dests,
);

typedef _dart_cupsSetDefaultDest = void Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> instance,
  int num_dests,
  ffi.Pointer<cups_dest_t> dests,
);

typedef _c_cupsCancelJob2 = ffi.Int32 Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<ffi.Int8> name,
  ffi.Int32 job_id,
  ffi.Int32 purge,
);

typedef _dart_cupsCancelJob2 = int Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<ffi.Int8> name,
  int job_id,
  int purge,
);

typedef _c_cupsCreateJob = ffi.Int32 Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> title,
  ffi.Int32 num_options,
  ffi.Pointer<cups_option_t> options,
);

typedef _dart_cupsCreateJob = int Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> title,
  int num_options,
  ffi.Pointer<cups_option_t> options,
);

typedef _c_cupsFinishDocument = ffi.Int32 Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<ffi.Int8> name,
);

typedef _dart_cupsFinishDocument = int Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<ffi.Int8> name,
);

typedef _c_cupsGetNamedDest = ffi.Pointer<cups_dest_t> Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> instance,
);

typedef _dart_cupsGetNamedDest = ffi.Pointer<cups_dest_t> Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> instance,
);

typedef _c_cupsGetPassword2 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> prompt,
  ffi.Pointer<http_t> http,
  ffi.Pointer<ffi.Int8> method,
  ffi.Pointer<ffi.Int8> resource,
);

typedef _dart_cupsGetPassword2 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8> prompt,
  ffi.Pointer<http_t> http,
  ffi.Pointer<ffi.Int8> method,
  ffi.Pointer<ffi.Int8> resource,
);

typedef _c_cupsGetResponse = ffi.Pointer<ipp_t> Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<ffi.Int8> resource,
);

typedef _dart_cupsGetResponse = ffi.Pointer<ipp_t> Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<ffi.Int8> resource,
);

typedef _c_cupsReadResponseData = ffi.Int64 Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<ffi.Int8> buffer,
  ffi.Uint64 length,
);

typedef _dart_cupsReadResponseData = int Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<ffi.Int8> buffer,
  int length,
);

typedef _c_cupsSendRequest = ffi.Int32 Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<ipp_t> request,
  ffi.Pointer<ffi.Int8> resource,
  ffi.Uint64 length,
);

typedef _dart_cupsSendRequest = int Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<ipp_t> request,
  ffi.Pointer<ffi.Int8> resource,
  int length,
);

typedef cups_password_cb2_t = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<http_t>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_cupsSetPasswordCB2 = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<cups_password_cb2_t>> cb,
  ffi.Pointer<ffi.Void> user_data,
);

typedef _dart_cupsSetPasswordCB2 = void Function(
  ffi.Pointer<ffi.NativeFunction<cups_password_cb2_t>> cb,
  ffi.Pointer<ffi.Void> user_data,
);

typedef _c_cupsStartDocument = ffi.Int32 Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<ffi.Int8> name,
  ffi.Int32 job_id,
  ffi.Pointer<ffi.Int8> docname,
  ffi.Pointer<ffi.Int8> format,
  ffi.Int32 last_document,
);

typedef _dart_cupsStartDocument = int Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<ffi.Int8> name,
  int job_id,
  ffi.Pointer<ffi.Int8> docname,
  ffi.Pointer<ffi.Int8> format,
  int last_document,
);

typedef _c_cupsWriteRequestData = ffi.Int32 Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<ffi.Int8> buffer,
  ffi.Uint64 length,
);

typedef _dart_cupsWriteRequestData = int Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<ffi.Int8> buffer,
  int length,
);

typedef cups_client_cert_cb_t = ffi.Int32 Function(
  ffi.Pointer<http_t>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<cups_array_t>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_cupsSetClientCertCB = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<cups_client_cert_cb_t>> cb,
  ffi.Pointer<ffi.Void> user_data,
);

typedef _dart_cupsSetClientCertCB = void Function(
  ffi.Pointer<ffi.NativeFunction<cups_client_cert_cb_t>> cb,
  ffi.Pointer<ffi.Void> user_data,
);

typedef _c_cupsSetCredentials = ffi.Int32 Function(
  ffi.Pointer<cups_array_t> certs,
);

typedef _dart_cupsSetCredentials = int Function(
  ffi.Pointer<cups_array_t> certs,
);

typedef cups_server_cert_cb_t = ffi.Int32 Function(
  ffi.Pointer<http_t>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<cups_array_t>,
  ffi.Pointer<ffi.Void>,
);

typedef _c_cupsSetServerCertCB = ffi.Void Function(
  ffi.Pointer<ffi.NativeFunction<cups_server_cert_cb_t>> cb,
  ffi.Pointer<ffi.Void> user_data,
);

typedef _dart_cupsSetServerCertCB = void Function(
  ffi.Pointer<ffi.NativeFunction<cups_server_cert_cb_t>> cb,
  ffi.Pointer<ffi.Void> user_data,
);

typedef _c_cupsCancelDestJob = ffi.Int32 Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<cups_dest_t> dest,
  ffi.Int32 job_id,
);

typedef _dart_cupsCancelDestJob = int Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<cups_dest_t> dest,
  int job_id,
);

typedef _c_cupsCheckDestSupported = ffi.Int32 Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<cups_dest_t> dest,
  ffi.Pointer<_cups_dinfo_s> info,
  ffi.Pointer<ffi.Int8> option,
  ffi.Pointer<ffi.Int8> value,
);

typedef _dart_cupsCheckDestSupported = int Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<cups_dest_t> dest,
  ffi.Pointer<_cups_dinfo_s> info,
  ffi.Pointer<ffi.Int8> option,
  ffi.Pointer<ffi.Int8> value,
);

typedef _c_cupsCloseDestJob = ffi.Int32 Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<cups_dest_t> dest,
  ffi.Pointer<_cups_dinfo_s> info,
  ffi.Int32 job_id,
);

typedef _dart_cupsCloseDestJob = int Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<cups_dest_t> dest,
  ffi.Pointer<_cups_dinfo_s> info,
  int job_id,
);

typedef cups_dest_cb_t = ffi.Int32 Function(
  ffi.Pointer<ffi.Void>,
  ffi.Uint32,
  ffi.Pointer<cups_dest_t>,
);

typedef _c_cupsConnectDest = ffi.Pointer<http_t> Function(
  ffi.Pointer<cups_dest_t> dest,
  ffi.Uint32 flags,
  ffi.Int32 msec,
  ffi.Pointer<ffi.Int32> cancel,
  ffi.Pointer<ffi.Int8> resource,
  ffi.Uint64 resourcesize,
  ffi.Pointer<ffi.NativeFunction<cups_dest_cb_t>> cb,
  ffi.Pointer<ffi.Void> user_data,
);

typedef _dart_cupsConnectDest = ffi.Pointer<http_t> Function(
  ffi.Pointer<cups_dest_t> dest,
  int flags,
  int msec,
  ffi.Pointer<ffi.Int32> cancel,
  ffi.Pointer<ffi.Int8> resource,
  int resourcesize,
  ffi.Pointer<ffi.NativeFunction<cups_dest_cb_t>> cb,
  ffi.Pointer<ffi.Void> user_data,
);

typedef _c_cupsCopyDest = ffi.Int32 Function(
  ffi.Pointer<cups_dest_t> dest,
  ffi.Int32 num_dests,
  ffi.Pointer<ffi.Pointer<cups_dest_t>> dests,
);

typedef _dart_cupsCopyDest = int Function(
  ffi.Pointer<cups_dest_t> dest,
  int num_dests,
  ffi.Pointer<ffi.Pointer<cups_dest_t>> dests,
);

typedef _c_cupsCopyDestInfo = ffi.Pointer<_cups_dinfo_s> Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<cups_dest_t> dest,
);

typedef _dart_cupsCopyDestInfo = ffi.Pointer<_cups_dinfo_s> Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<cups_dest_t> dest,
);

typedef _c_cupsCopyDestConflicts = ffi.Int32 Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<cups_dest_t> dest,
  ffi.Pointer<_cups_dinfo_s> info,
  ffi.Int32 num_options,
  ffi.Pointer<cups_option_t> options,
  ffi.Pointer<ffi.Int8> new_option,
  ffi.Pointer<ffi.Int8> new_value,
  ffi.Pointer<ffi.Int32> num_conflicts,
  ffi.Pointer<ffi.Pointer<cups_option_t>> conflicts,
  ffi.Pointer<ffi.Int32> num_resolved,
  ffi.Pointer<ffi.Pointer<cups_option_t>> resolved,
);

typedef _dart_cupsCopyDestConflicts = int Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<cups_dest_t> dest,
  ffi.Pointer<_cups_dinfo_s> info,
  int num_options,
  ffi.Pointer<cups_option_t> options,
  ffi.Pointer<ffi.Int8> new_option,
  ffi.Pointer<ffi.Int8> new_value,
  ffi.Pointer<ffi.Int32> num_conflicts,
  ffi.Pointer<ffi.Pointer<cups_option_t>> conflicts,
  ffi.Pointer<ffi.Int32> num_resolved,
  ffi.Pointer<ffi.Pointer<cups_option_t>> resolved,
);

typedef _c_cupsCreateDestJob = ffi.Int32 Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<cups_dest_t> dest,
  ffi.Pointer<_cups_dinfo_s> info,
  ffi.Pointer<ffi.Int32> job_id,
  ffi.Pointer<ffi.Int8> title,
  ffi.Int32 num_options,
  ffi.Pointer<cups_option_t> options,
);

typedef _dart_cupsCreateDestJob = int Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<cups_dest_t> dest,
  ffi.Pointer<_cups_dinfo_s> info,
  ffi.Pointer<ffi.Int32> job_id,
  ffi.Pointer<ffi.Int8> title,
  int num_options,
  ffi.Pointer<cups_option_t> options,
);

typedef _c_cupsEnumDests = ffi.Int32 Function(
  ffi.Uint32 flags,
  ffi.Int32 msec,
  ffi.Pointer<ffi.Int32> cancel,
  ffi.Uint32 type,
  ffi.Uint32 mask,
  ffi.Pointer<ffi.NativeFunction<cups_dest_cb_t>> cb,
  ffi.Pointer<ffi.Void> user_data,
);

typedef _dart_cupsEnumDests = int Function(
  int flags,
  int msec,
  ffi.Pointer<ffi.Int32> cancel,
  int type,
  int mask,
  ffi.Pointer<ffi.NativeFunction<cups_dest_cb_t>> cb,
  ffi.Pointer<ffi.Void> user_data,
);

typedef _c_cupsFinishDestDocument = ffi.Int32 Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<cups_dest_t> dest,
  ffi.Pointer<_cups_dinfo_s> info,
);

typedef _dart_cupsFinishDestDocument = int Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<cups_dest_t> dest,
  ffi.Pointer<_cups_dinfo_s> info,
);

typedef _c_cupsFreeDestInfo = ffi.Void Function(
  ffi.Pointer<_cups_dinfo_s> dinfo,
);

typedef _dart_cupsFreeDestInfo = void Function(
  ffi.Pointer<_cups_dinfo_s> dinfo,
);

typedef _c_cupsGetDestMediaByName = ffi.Int32 Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<cups_dest_t> dest,
  ffi.Pointer<_cups_dinfo_s> dinfo,
  ffi.Pointer<ffi.Int8> media,
  ffi.Uint32 flags,
  ffi.Pointer<cups_size_t> size,
);

typedef _dart_cupsGetDestMediaByName = int Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<cups_dest_t> dest,
  ffi.Pointer<_cups_dinfo_s> dinfo,
  ffi.Pointer<ffi.Int8> media,
  int flags,
  ffi.Pointer<cups_size_t> size,
);

typedef _c_cupsGetDestMediaBySize = ffi.Int32 Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<cups_dest_t> dest,
  ffi.Pointer<_cups_dinfo_s> dinfo,
  ffi.Int32 width,
  ffi.Int32 length,
  ffi.Uint32 flags,
  ffi.Pointer<cups_size_t> size,
);

typedef _dart_cupsGetDestMediaBySize = int Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<cups_dest_t> dest,
  ffi.Pointer<_cups_dinfo_s> dinfo,
  int width,
  int length,
  int flags,
  ffi.Pointer<cups_size_t> size,
);

typedef _c_cupsLocalizeDestOption = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<cups_dest_t> dest,
  ffi.Pointer<_cups_dinfo_s> info,
  ffi.Pointer<ffi.Int8> option,
);

typedef _dart_cupsLocalizeDestOption = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<cups_dest_t> dest,
  ffi.Pointer<_cups_dinfo_s> info,
  ffi.Pointer<ffi.Int8> option,
);

typedef _c_cupsLocalizeDestValue = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<cups_dest_t> dest,
  ffi.Pointer<_cups_dinfo_s> info,
  ffi.Pointer<ffi.Int8> option,
  ffi.Pointer<ffi.Int8> value,
);

typedef _dart_cupsLocalizeDestValue = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<cups_dest_t> dest,
  ffi.Pointer<_cups_dinfo_s> info,
  ffi.Pointer<ffi.Int8> option,
  ffi.Pointer<ffi.Int8> value,
);

typedef _c_cupsStartDestDocument = ffi.Int32 Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<cups_dest_t> dest,
  ffi.Pointer<_cups_dinfo_s> info,
  ffi.Int32 job_id,
  ffi.Pointer<ffi.Int8> docname,
  ffi.Pointer<ffi.Int8> format,
  ffi.Int32 num_options,
  ffi.Pointer<cups_option_t> options,
  ffi.Int32 last_document,
);

typedef _dart_cupsStartDestDocument = int Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<cups_dest_t> dest,
  ffi.Pointer<_cups_dinfo_s> info,
  int job_id,
  ffi.Pointer<ffi.Int8> docname,
  ffi.Pointer<ffi.Int8> format,
  int num_options,
  ffi.Pointer<cups_option_t> options,
  int last_document,
);

typedef _c_cupsFindDestDefault = ffi.Pointer<ipp_attribute_t> Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<cups_dest_t> dest,
  ffi.Pointer<_cups_dinfo_s> dinfo,
  ffi.Pointer<ffi.Int8> option,
);

typedef _dart_cupsFindDestDefault = ffi.Pointer<ipp_attribute_t> Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<cups_dest_t> dest,
  ffi.Pointer<_cups_dinfo_s> dinfo,
  ffi.Pointer<ffi.Int8> option,
);

typedef _c_cupsFindDestReady = ffi.Pointer<ipp_attribute_t> Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<cups_dest_t> dest,
  ffi.Pointer<_cups_dinfo_s> dinfo,
  ffi.Pointer<ffi.Int8> option,
);

typedef _dart_cupsFindDestReady = ffi.Pointer<ipp_attribute_t> Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<cups_dest_t> dest,
  ffi.Pointer<_cups_dinfo_s> dinfo,
  ffi.Pointer<ffi.Int8> option,
);

typedef _c_cupsFindDestSupported = ffi.Pointer<ipp_attribute_t> Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<cups_dest_t> dest,
  ffi.Pointer<_cups_dinfo_s> dinfo,
  ffi.Pointer<ffi.Int8> option,
);

typedef _dart_cupsFindDestSupported = ffi.Pointer<ipp_attribute_t> Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<cups_dest_t> dest,
  ffi.Pointer<_cups_dinfo_s> dinfo,
  ffi.Pointer<ffi.Int8> option,
);

typedef _c_cupsGetDestMediaByIndex = ffi.Int32 Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<cups_dest_t> dest,
  ffi.Pointer<_cups_dinfo_s> dinfo,
  ffi.Int32 n,
  ffi.Uint32 flags,
  ffi.Pointer<cups_size_t> size,
);

typedef _dart_cupsGetDestMediaByIndex = int Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<cups_dest_t> dest,
  ffi.Pointer<_cups_dinfo_s> dinfo,
  int n,
  int flags,
  ffi.Pointer<cups_size_t> size,
);

typedef _c_cupsGetDestMediaCount = ffi.Int32 Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<cups_dest_t> dest,
  ffi.Pointer<_cups_dinfo_s> dinfo,
  ffi.Uint32 flags,
);

typedef _dart_cupsGetDestMediaCount = int Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<cups_dest_t> dest,
  ffi.Pointer<_cups_dinfo_s> dinfo,
  int flags,
);

typedef _c_cupsGetDestMediaDefault = ffi.Int32 Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<cups_dest_t> dest,
  ffi.Pointer<_cups_dinfo_s> dinfo,
  ffi.Uint32 flags,
  ffi.Pointer<cups_size_t> size,
);

typedef _dart_cupsGetDestMediaDefault = int Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<cups_dest_t> dest,
  ffi.Pointer<_cups_dinfo_s> dinfo,
  int flags,
  ffi.Pointer<cups_size_t> size,
);

typedef _c_cupsSetUserAgent = ffi.Void Function(
  ffi.Pointer<ffi.Int8> user_agent,
);

typedef _dart_cupsSetUserAgent = void Function(
  ffi.Pointer<ffi.Int8> user_agent,
);

typedef _c_cupsUserAgent = ffi.Pointer<ffi.Int8> Function();

typedef _dart_cupsUserAgent = ffi.Pointer<ffi.Int8> Function();

typedef _c_cupsGetDestWithURI = ffi.Pointer<cups_dest_t> Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> uri,
);

typedef _dart_cupsGetDestWithURI = ffi.Pointer<cups_dest_t> Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> uri,
);

typedef _c_cupsLocalizeDestMedia = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<cups_dest_t> dest,
  ffi.Pointer<_cups_dinfo_s> info,
  ffi.Uint32 flags,
  ffi.Pointer<cups_size_t> size,
);

typedef _dart_cupsLocalizeDestMedia = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<cups_dest_t> dest,
  ffi.Pointer<_cups_dinfo_s> info,
  int flags,
  ffi.Pointer<cups_size_t> size,
);

typedef _c_cupsMakeServerCredentials = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> path,
  ffi.Pointer<ffi.Int8> common_name,
  ffi.Int32 num_alt_names,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> alt_names,
  ffi.Int64 expiration_date,
);

typedef _dart_cupsMakeServerCredentials = int Function(
  ffi.Pointer<ffi.Int8> path,
  ffi.Pointer<ffi.Int8> common_name,
  int num_alt_names,
  ffi.Pointer<ffi.Pointer<ffi.Int8>> alt_names,
  int expiration_date,
);

typedef _c_cupsSetServerCredentials = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> path,
  ffi.Pointer<ffi.Int8> common_name,
  ffi.Int32 auto_create,
);

typedef _dart_cupsSetServerCredentials = int Function(
  ffi.Pointer<ffi.Int8> path,
  ffi.Pointer<ffi.Int8> common_name,
  int auto_create,
);

typedef _c_cupsHashData = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8> algorithm,
  ffi.Pointer<ffi.Void> data,
  ffi.Uint64 datalen,
  ffi.Pointer<ffi.Uint8> hash,
  ffi.Uint64 hashsize,
);

typedef _dart_cupsHashData = int Function(
  ffi.Pointer<ffi.Int8> algorithm,
  ffi.Pointer<ffi.Void> data,
  int datalen,
  ffi.Pointer<ffi.Uint8> hash,
  int hashsize,
);

typedef _c_cupsAddIntegerOption = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Int32 value,
  ffi.Int32 num_options,
  ffi.Pointer<ffi.Pointer<cups_option_t>> options,
);

typedef _dart_cupsAddIntegerOption = int Function(
  ffi.Pointer<ffi.Int8> name,
  int value,
  int num_options,
  ffi.Pointer<ffi.Pointer<cups_option_t>> options,
);

typedef _c_cupsGetIntegerOption = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> name,
  ffi.Int32 num_options,
  ffi.Pointer<cups_option_t> options,
);

typedef _dart_cupsGetIntegerOption = int Function(
  ffi.Pointer<ffi.Int8> name,
  int num_options,
  ffi.Pointer<cups_option_t> options,
);

typedef _c_cupsHashString = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Uint8> hash,
  ffi.Uint64 hashsize,
  ffi.Pointer<ffi.Int8> buffer,
  ffi.Uint64 bufsize,
);

typedef _dart_cupsHashString = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Uint8> hash,
  int hashsize,
  ffi.Pointer<ffi.Int8> buffer,
  int bufsize,
);

typedef _c_cupsAddDestMediaOptions = ffi.Int32 Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<cups_dest_t> dest,
  ffi.Pointer<_cups_dinfo_s> dinfo,
  ffi.Uint32 flags,
  ffi.Pointer<cups_size_t> size,
  ffi.Int32 num_options,
  ffi.Pointer<ffi.Pointer<cups_option_t>> options,
);

typedef _dart_cupsAddDestMediaOptions = int Function(
  ffi.Pointer<http_t> http,
  ffi.Pointer<cups_dest_t> dest,
  ffi.Pointer<_cups_dinfo_s> dinfo,
  int flags,
  ffi.Pointer<cups_size_t> size,
  int num_options,
  ffi.Pointer<ffi.Pointer<cups_option_t>> options,
);

typedef _c_cupsEncodeOption = ffi.Pointer<ipp_attribute_t> Function(
  ffi.Pointer<ipp_t> ipp,
  ffi.Int32 group_tag,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> value,
);

typedef _dart_cupsEncodeOption = ffi.Pointer<ipp_attribute_t> Function(
  ffi.Pointer<ipp_t> ipp,
  int group_tag,
  ffi.Pointer<ffi.Int8> name,
  ffi.Pointer<ffi.Int8> value,
);
